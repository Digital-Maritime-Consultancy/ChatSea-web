/* tslint:disable */
/* eslint-disable */
/**
 * SaaS Management Service
 * Management Service for SaaS infrastructure
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { PageUser } from '../models';
import { PageUserServiceSubscription } from '../models';
import { User } from '../models';
import { UserServiceSubscription } from '../models';
import { UserServiceSubscriptionDto } from '../models';
/**
 * UserManagementControllerApi - axios parameter creator
 * @export
 */
export const UserManagementControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} body 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignRoleToUser: async (body: string, orgMrn: string, mrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling assignRoleToUser.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling assignRoleToUser.');
            }
            // verify required parameter 'mrn' is not null or undefined
            if (mrn === null || mrn === undefined) {
                throw new RequiredError('mrn','Required parameter mrn was null or undefined when calling assignRoleToUser.');
            }
            const localVarPath = `/api/user-management/org/{orgMrn}/mrn/{mrn}/assign-role`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"mrn"}}`, encodeURIComponent(String(mrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserServiceSubscriptionDto} body 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserServiceSubscription: async (body: UserServiceSubscriptionDto, orgMrn: string, mrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createUserServiceSubscription.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling createUserServiceSubscription.');
            }
            // verify required parameter 'mrn' is not null or undefined
            if (mrn === null || mrn === undefined) {
                throw new RequiredError('mrn','Required parameter mrn was null or undefined when calling createUserServiceSubscription.');
            }
            const localVarPath = `/api/user-management/org/{orgMrn}/mrn/{mrn}/create-service-subscription`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"mrn"}}`, encodeURIComponent(String(mrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {number} userServiceSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserServiceSubscription: async (orgMrn: string, mrn: string, userServiceSubscriptionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling deleteUserServiceSubscription.');
            }
            // verify required parameter 'mrn' is not null or undefined
            if (mrn === null || mrn === undefined) {
                throw new RequiredError('mrn','Required parameter mrn was null or undefined when calling deleteUserServiceSubscription.');
            }
            // verify required parameter 'userServiceSubscriptionId' is not null or undefined
            if (userServiceSubscriptionId === null || userServiceSubscriptionId === undefined) {
                throw new RequiredError('userServiceSubscriptionId','Required parameter userServiceSubscriptionId was null or undefined when calling deleteUserServiceSubscription.');
            }
            const localVarPath = `/api/user-management/org/{orgMrn}/mrn/{mrn}/service-subscription/{userServiceSubscriptionId}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"mrn"}}`, encodeURIComponent(String(mrn)))
                .replace(`{${"userServiceSubscriptionId"}}`, encodeURIComponent(String(userServiceSubscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a page of all users in an organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationUsers: async (orgMrn: string, page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getOrganizationUsers.');
            }
            const localVarPath = `/api/user-management/org/{orgMrn}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a user by its MRN
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByMrn: async (orgMrn: string, mrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getUserByMrn.');
            }
            // verify required parameter 'mrn' is not null or undefined
            if (mrn === null || mrn === undefined) {
                throw new RequiredError('mrn','Required parameter mrn was null or undefined when calling getUserByMrn.');
            }
            const localVarPath = `/api/user-management/org/{orgMrn}/mrn/{mrn}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"mrn"}}`, encodeURIComponent(String(mrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a user by its UUID
         * @param {string} orgMrn 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByUuid: async (orgMrn: string, uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getUserByUuid.');
            }
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling getUserByUuid.');
            }
            const localVarPath = `/api/user-management/org/{orgMrn}/uuid/{uuid}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {number} userServiceSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserServiceSubscription: async (orgMrn: string, mrn: string, userServiceSubscriptionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getUserServiceSubscription.');
            }
            // verify required parameter 'mrn' is not null or undefined
            if (mrn === null || mrn === undefined) {
                throw new RequiredError('mrn','Required parameter mrn was null or undefined when calling getUserServiceSubscription.');
            }
            // verify required parameter 'userServiceSubscriptionId' is not null or undefined
            if (userServiceSubscriptionId === null || userServiceSubscriptionId === undefined) {
                throw new RequiredError('userServiceSubscriptionId','Required parameter userServiceSubscriptionId was null or undefined when calling getUserServiceSubscription.');
            }
            const localVarPath = `/api/user-management/org/{orgMrn}/mrn/{mrn}/service-subscription/{userServiceSubscriptionId}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"mrn"}}`, encodeURIComponent(String(mrn)))
                .replace(`{${"userServiceSubscriptionId"}}`, encodeURIComponent(String(userServiceSubscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserServiceSubscriptions: async (orgMrn: string, mrn: string, page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getUserServiceSubscriptions.');
            }
            // verify required parameter 'mrn' is not null or undefined
            if (mrn === null || mrn === undefined) {
                throw new RequiredError('mrn','Required parameter mrn was null or undefined when calling getUserServiceSubscriptions.');
            }
            const localVarPath = `/api/user-management/org/{orgMrn}/mrn/{mrn}/service-subscriptions`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"mrn"}}`, encodeURIComponent(String(mrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserServiceSubscriptionDto} body 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {number} userServiceSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserServiceSubscription: async (body: UserServiceSubscriptionDto, orgMrn: string, mrn: string, userServiceSubscriptionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateUserServiceSubscription.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling updateUserServiceSubscription.');
            }
            // verify required parameter 'mrn' is not null or undefined
            if (mrn === null || mrn === undefined) {
                throw new RequiredError('mrn','Required parameter mrn was null or undefined when calling updateUserServiceSubscription.');
            }
            // verify required parameter 'userServiceSubscriptionId' is not null or undefined
            if (userServiceSubscriptionId === null || userServiceSubscriptionId === undefined) {
                throw new RequiredError('userServiceSubscriptionId','Required parameter userServiceSubscriptionId was null or undefined when calling updateUserServiceSubscription.');
            }
            const localVarPath = `/api/user-management/org/{orgMrn}/mrn/{mrn}/service-subscription/{userServiceSubscriptionId}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"mrn"}}`, encodeURIComponent(String(mrn)))
                .replace(`{${"userServiceSubscriptionId"}}`, encodeURIComponent(String(userServiceSubscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserManagementControllerApi - functional programming interface
 * @export
 */
export const UserManagementControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} body 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignRoleToUser(body: string, orgMrn: string, mrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await UserManagementControllerApiAxiosParamCreator(configuration).assignRoleToUser(body, orgMrn, mrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UserServiceSubscriptionDto} body 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserServiceSubscription(body: UserServiceSubscriptionDto, orgMrn: string, mrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserServiceSubscription>>> {
            const localVarAxiosArgs = await UserManagementControllerApiAxiosParamCreator(configuration).createUserServiceSubscription(body, orgMrn, mrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {number} userServiceSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserServiceSubscription(orgMrn: string, mrn: string, userServiceSubscriptionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await UserManagementControllerApiAxiosParamCreator(configuration).deleteUserServiceSubscription(orgMrn, mrn, userServiceSubscriptionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a page of all users in an organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationUsers(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageUser>>> {
            const localVarAxiosArgs = await UserManagementControllerApiAxiosParamCreator(configuration).getOrganizationUsers(orgMrn, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a user by its MRN
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByMrn(orgMrn: string, mrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<User>>> {
            const localVarAxiosArgs = await UserManagementControllerApiAxiosParamCreator(configuration).getUserByMrn(orgMrn, mrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a user by its UUID
         * @param {string} orgMrn 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByUuid(orgMrn: string, uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<User>>> {
            const localVarAxiosArgs = await UserManagementControllerApiAxiosParamCreator(configuration).getUserByUuid(orgMrn, uuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {number} userServiceSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserServiceSubscription(orgMrn: string, mrn: string, userServiceSubscriptionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<UserServiceSubscription>>> {
            const localVarAxiosArgs = await UserManagementControllerApiAxiosParamCreator(configuration).getUserServiceSubscription(orgMrn, mrn, userServiceSubscriptionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserServiceSubscriptions(orgMrn: string, mrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageUserServiceSubscription>>> {
            const localVarAxiosArgs = await UserManagementControllerApiAxiosParamCreator(configuration).getUserServiceSubscriptions(orgMrn, mrn, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UserServiceSubscriptionDto} body 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {number} userServiceSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserServiceSubscription(body: UserServiceSubscriptionDto, orgMrn: string, mrn: string, userServiceSubscriptionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await UserManagementControllerApiAxiosParamCreator(configuration).updateUserServiceSubscription(body, orgMrn, mrn, userServiceSubscriptionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserManagementControllerApi - factory interface
 * @export
 */
export const UserManagementControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} body 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignRoleToUser(body: string, orgMrn: string, mrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return UserManagementControllerApiFp(configuration).assignRoleToUser(body, orgMrn, mrn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserServiceSubscriptionDto} body 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserServiceSubscription(body: UserServiceSubscriptionDto, orgMrn: string, mrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<UserServiceSubscription>> {
            return UserManagementControllerApiFp(configuration).createUserServiceSubscription(body, orgMrn, mrn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {number} userServiceSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserServiceSubscription(orgMrn: string, mrn: string, userServiceSubscriptionId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return UserManagementControllerApiFp(configuration).deleteUserServiceSubscription(orgMrn, mrn, userServiceSubscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a page of all users in an organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationUsers(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageUser>> {
            return UserManagementControllerApiFp(configuration).getOrganizationUsers(orgMrn, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a user by its MRN
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByMrn(orgMrn: string, mrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<User>> {
            return UserManagementControllerApiFp(configuration).getUserByMrn(orgMrn, mrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a user by its UUID
         * @param {string} orgMrn 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByUuid(orgMrn: string, uuid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<User>> {
            return UserManagementControllerApiFp(configuration).getUserByUuid(orgMrn, uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {number} userServiceSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserServiceSubscription(orgMrn: string, mrn: string, userServiceSubscriptionId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<UserServiceSubscription>> {
            return UserManagementControllerApiFp(configuration).getUserServiceSubscription(orgMrn, mrn, userServiceSubscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserServiceSubscriptions(orgMrn: string, mrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageUserServiceSubscription>> {
            return UserManagementControllerApiFp(configuration).getUserServiceSubscriptions(orgMrn, mrn, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserServiceSubscriptionDto} body 
         * @param {string} orgMrn 
         * @param {string} mrn 
         * @param {number} userServiceSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserServiceSubscription(body: UserServiceSubscriptionDto, orgMrn: string, mrn: string, userServiceSubscriptionId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return UserManagementControllerApiFp(configuration).updateUserServiceSubscription(body, orgMrn, mrn, userServiceSubscriptionId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserManagementControllerApi - object-oriented interface
 * @export
 * @class UserManagementControllerApi
 * @extends {BaseAPI}
 */
export class UserManagementControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} body 
     * @param {string} orgMrn 
     * @param {string} mrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementControllerApi
     */
    public async assignRoleToUser(body: string, orgMrn: string, mrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return UserManagementControllerApiFp(this.configuration).assignRoleToUser(body, orgMrn, mrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {UserServiceSubscriptionDto} body 
     * @param {string} orgMrn 
     * @param {string} mrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementControllerApi
     */
    public async createUserServiceSubscription(body: UserServiceSubscriptionDto, orgMrn: string, mrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserServiceSubscription>> {
        return UserManagementControllerApiFp(this.configuration).createUserServiceSubscription(body, orgMrn, mrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} orgMrn 
     * @param {string} mrn 
     * @param {number} userServiceSubscriptionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementControllerApi
     */
    public async deleteUserServiceSubscription(orgMrn: string, mrn: string, userServiceSubscriptionId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return UserManagementControllerApiFp(this.configuration).deleteUserServiceSubscription(orgMrn, mrn, userServiceSubscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a page of all users in an organization
     * @param {string} orgMrn 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementControllerApi
     */
    public async getOrganizationUsers(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageUser>> {
        return UserManagementControllerApiFp(this.configuration).getOrganizationUsers(orgMrn, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a user by its MRN
     * @param {string} orgMrn 
     * @param {string} mrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementControllerApi
     */
    public async getUserByMrn(orgMrn: string, mrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<User>> {
        return UserManagementControllerApiFp(this.configuration).getUserByMrn(orgMrn, mrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a user by its UUID
     * @param {string} orgMrn 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementControllerApi
     */
    public async getUserByUuid(orgMrn: string, uuid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<User>> {
        return UserManagementControllerApiFp(this.configuration).getUserByUuid(orgMrn, uuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} orgMrn 
     * @param {string} mrn 
     * @param {number} userServiceSubscriptionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementControllerApi
     */
    public async getUserServiceSubscription(orgMrn: string, mrn: string, userServiceSubscriptionId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<UserServiceSubscription>> {
        return UserManagementControllerApiFp(this.configuration).getUserServiceSubscription(orgMrn, mrn, userServiceSubscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} orgMrn 
     * @param {string} mrn 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementControllerApi
     */
    public async getUserServiceSubscriptions(orgMrn: string, mrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageUserServiceSubscription>> {
        return UserManagementControllerApiFp(this.configuration).getUserServiceSubscriptions(orgMrn, mrn, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {UserServiceSubscriptionDto} body 
     * @param {string} orgMrn 
     * @param {string} mrn 
     * @param {number} userServiceSubscriptionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserManagementControllerApi
     */
    public async updateUserServiceSubscription(body: UserServiceSubscriptionDto, orgMrn: string, mrn: string, userServiceSubscriptionId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return UserManagementControllerApiFp(this.configuration).updateUserServiceSubscription(body, orgMrn, mrn, userServiceSubscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
}
