/* tslint:disable */
/* eslint-disable */
/**
 * SaaS Management Service
 * Management Service for SaaS infrastructure
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Invoice } from '../models';
import { InvoiceDto } from '../models';
import { Organization } from '../models';
import { OrganizationCandidate } from '../models';
import { OrganizationCandidateDto } from '../models';
import { OrganizationDto } from '../models';
import { OrganizationSubscription } from '../models';
import { OrganizationSubscriptionDto } from '../models';
import { PageInvoice } from '../models';
import { PageOrganization } from '../models';
import { PageOrganizationCandidate } from '../models';
import { PageOrganizationSubscription } from '../models';
import { PageService } from '../models';
import { PageServiceUsageMetric } from '../models';
import { PageSubscriptionPlan } from '../models';
import { Service } from '../models';
import { ServiceDto } from '../models';
import { ServiceUsageMetric } from '../models';
import { ServiceUsageMetricDto } from '../models';
import { SubscriptionPlan } from '../models';
import { SubscriptionPlanDto } from '../models';
/**
 * SuperAdminControllerApi - axios parameter creator
 * @export
 */
export const SuperAdminControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {InvoiceDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvoice: async (body: InvoiceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createInvoice.');
            }
            const localVarPath = `/api/super-admin/invoice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new organization
         * @param {OrganizationDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganization: async (body: OrganizationDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createOrganization.');
            }
            const localVarPath = `/api/super-admin/org`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OrganizationSubscriptionDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationSubscription: async (body: OrganizationSubscriptionDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createOrganizationSubscription.');
            }
            const localVarPath = `/api/super-admin/organization-subscription`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new service
         * @param {ServiceDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createService: async (body: ServiceDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createService.');
            }
            const localVarPath = `/api/super-admin/service`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new service usage metric
         * @param {ServiceUsageMetricDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceUsageMetric: async (body: ServiceUsageMetricDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createServiceUsageMetric.');
            }
            const localVarPath = `/api/super-admin/service-usage-metric`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SubscriptionPlanDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSubscriptionPlan: async (body: SubscriptionPlanDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createSubscriptionPlan.');
            }
            const localVarPath = `/api/super-admin/subscription-plan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} invoiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteInvoice: async (invoiceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            if (invoiceId === null || invoiceId === undefined) {
                throw new RequiredError('invoiceId','Required parameter invoiceId was null or undefined when calling deleteInvoice.');
            }
            const localVarPath = `/api/super-admin/invoice/{invoiceId}`
                .replace(`{${"invoiceId"}}`, encodeURIComponent(String(invoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganization: async (mrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mrn' is not null or undefined
            if (mrn === null || mrn === undefined) {
                throw new RequiredError('mrn','Required parameter mrn was null or undefined when calling deleteOrganization.');
            }
            const localVarPath = `/api/super-admin/org/mrn/{mrn}`
                .replace(`{${"mrn"}}`, encodeURIComponent(String(mrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizationCandidate: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteOrganizationCandidate.');
            }
            const localVarPath = `/api/super-admin/org-candidate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} organizationSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrganizationSubscription: async (organizationSubscriptionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationSubscriptionId' is not null or undefined
            if (organizationSubscriptionId === null || organizationSubscriptionId === undefined) {
                throw new RequiredError('organizationSubscriptionId','Required parameter organizationSubscriptionId was null or undefined when calling deleteOrganizationSubscription.');
            }
            const localVarPath = `/api/super-admin/organization-subscription/{organizationSubscriptionId}`
                .replace(`{${"organizationSubscriptionId"}}`, encodeURIComponent(String(organizationSubscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteService: async (serviceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceId' is not null or undefined
            if (serviceId === null || serviceId === undefined) {
                throw new RequiredError('serviceId','Required parameter serviceId was null or undefined when calling deleteService.');
            }
            const localVarPath = `/api/super-admin/service/id/{serviceId}`
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} serviceUsageMetricId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceUsageMetric: async (serviceUsageMetricId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUsageMetricId' is not null or undefined
            if (serviceUsageMetricId === null || serviceUsageMetricId === undefined) {
                throw new RequiredError('serviceUsageMetricId','Required parameter serviceUsageMetricId was null or undefined when calling deleteServiceUsageMetric.');
            }
            const localVarPath = `/api/super-admin/service-usage-metric/{serviceUsageMetricId}`
                .replace(`{${"serviceUsageMetricId"}}`, encodeURIComponent(String(serviceUsageMetricId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} subscriptionPlanId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSubscriptionPlan: async (subscriptionPlanId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionPlanId' is not null or undefined
            if (subscriptionPlanId === null || subscriptionPlanId === undefined) {
                throw new RequiredError('subscriptionPlanId','Required parameter subscriptionPlanId was null or undefined when calling deleteSubscriptionPlan.');
            }
            const localVarPath = `/api/super-admin/subscription-plan/{subscriptionPlanId}`
                .replace(`{${"subscriptionPlanId"}}`, encodeURIComponent(String(subscriptionPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} invoiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoice: async (invoiceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            if (invoiceId === null || invoiceId === undefined) {
                throw new RequiredError('invoiceId','Required parameter invoiceId was null or undefined when calling getInvoice.');
            }
            const localVarPath = `/api/super-admin/invoice/{invoiceId}`
                .replace(`{${"invoiceId"}}`, encodeURIComponent(String(invoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoices: async (page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/super-admin/invoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an organization by its MRN
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationByMrn: async (mrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mrn' is not null or undefined
            if (mrn === null || mrn === undefined) {
                throw new RequiredError('mrn','Required parameter mrn was null or undefined when calling getOrganizationByMrn.');
            }
            const localVarPath = `/api/super-admin/org/mrn/{mrn}`
                .replace(`{${"mrn"}}`, encodeURIComponent(String(mrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an organization by its UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationByUuid: async (uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling getOrganizationByUuid.');
            }
            const localVarPath = `/api/super-admin/org/uuid/{uuid}`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationCandidate: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOrganizationCandidate.');
            }
            const localVarPath = `/api/super-admin/org-candidate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationCandidates: async (page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/super-admin/org-candidates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} organizationSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationSubscription: async (organizationSubscriptionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organizationSubscriptionId' is not null or undefined
            if (organizationSubscriptionId === null || organizationSubscriptionId === undefined) {
                throw new RequiredError('organizationSubscriptionId','Required parameter organizationSubscriptionId was null or undefined when calling getOrganizationSubscription.');
            }
            const localVarPath = `/api/super-admin/organization-subscription/{organizationSubscriptionId}`
                .replace(`{${"organizationSubscriptionId"}}`, encodeURIComponent(String(organizationSubscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationSubscriptions: async (page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/super-admin/organization-subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizations: async (page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/super-admin/orgs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getService: async (serviceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceId' is not null or undefined
            if (serviceId === null || serviceId === undefined) {
                throw new RequiredError('serviceId','Required parameter serviceId was null or undefined when calling getService.');
            }
            const localVarPath = `/api/super-admin/service/id/{serviceId}`
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} serviceUsageMetricId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceUsageMetric: async (serviceUsageMetricId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceUsageMetricId' is not null or undefined
            if (serviceUsageMetricId === null || serviceUsageMetricId === undefined) {
                throw new RequiredError('serviceUsageMetricId','Required parameter serviceUsageMetricId was null or undefined when calling getServiceUsageMetric.');
            }
            const localVarPath = `/api/super-admin/service-usage-metric/{serviceUsageMetricId}`
                .replace(`{${"serviceUsageMetricId"}}`, encodeURIComponent(String(serviceUsageMetricId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceUsageMetrics: async (page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/super-admin/service-usage-metrics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServices: async (page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/super-admin/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} subscriptionPlanId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionPlan: async (subscriptionPlanId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionPlanId' is not null or undefined
            if (subscriptionPlanId === null || subscriptionPlanId === undefined) {
                throw new RequiredError('subscriptionPlanId','Required parameter subscriptionPlanId was null or undefined when calling getSubscriptionPlan.');
            }
            const localVarPath = `/api/super-admin/subscription-plan/{subscriptionPlanId}`
                .replace(`{${"subscriptionPlanId"}}`, encodeURIComponent(String(subscriptionPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionPlans: async (page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/super-admin/subscription-plans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {InvoiceDto} body 
         * @param {number} invoiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateInvoice: async (body: InvoiceDto, invoiceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateInvoice.');
            }
            // verify required parameter 'invoiceId' is not null or undefined
            if (invoiceId === null || invoiceId === undefined) {
                throw new RequiredError('invoiceId','Required parameter invoiceId was null or undefined when calling updateInvoice.');
            }
            const localVarPath = `/api/super-admin/invoice/{invoiceId}`
                .replace(`{${"invoiceId"}}`, encodeURIComponent(String(invoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OrganizationDto} body 
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization: async (body: OrganizationDto, mrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateOrganization.');
            }
            // verify required parameter 'mrn' is not null or undefined
            if (mrn === null || mrn === undefined) {
                throw new RequiredError('mrn','Required parameter mrn was null or undefined when calling updateOrganization.');
            }
            const localVarPath = `/api/super-admin/org/mrn/{mrn}`
                .replace(`{${"mrn"}}`, encodeURIComponent(String(mrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OrganizationCandidateDto} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationCandidate: async (body: OrganizationCandidateDto, id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateOrganizationCandidate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateOrganizationCandidate.');
            }
            const localVarPath = `/api/super-admin/org-candidate/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OrganizationSubscriptionDto} body 
         * @param {number} organizationSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganizationSubscription: async (body: OrganizationSubscriptionDto, organizationSubscriptionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateOrganizationSubscription.');
            }
            // verify required parameter 'organizationSubscriptionId' is not null or undefined
            if (organizationSubscriptionId === null || organizationSubscriptionId === undefined) {
                throw new RequiredError('organizationSubscriptionId','Required parameter organizationSubscriptionId was null or undefined when calling updateOrganizationSubscription.');
            }
            const localVarPath = `/api/super-admin/organization-subscription/{organizationSubscriptionId}`
                .replace(`{${"organizationSubscriptionId"}}`, encodeURIComponent(String(organizationSubscriptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ServiceDto} body 
         * @param {number} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateService: async (body: ServiceDto, serviceId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateService.');
            }
            // verify required parameter 'serviceId' is not null or undefined
            if (serviceId === null || serviceId === undefined) {
                throw new RequiredError('serviceId','Required parameter serviceId was null or undefined when calling updateService.');
            }
            const localVarPath = `/api/super-admin/service/id/{serviceId}`
                .replace(`{${"serviceId"}}`, encodeURIComponent(String(serviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ServiceUsageMetricDto} body 
         * @param {number} serviceUsageMetricId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServiceUsageMetric: async (body: ServiceUsageMetricDto, serviceUsageMetricId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateServiceUsageMetric.');
            }
            // verify required parameter 'serviceUsageMetricId' is not null or undefined
            if (serviceUsageMetricId === null || serviceUsageMetricId === undefined) {
                throw new RequiredError('serviceUsageMetricId','Required parameter serviceUsageMetricId was null or undefined when calling updateServiceUsageMetric.');
            }
            const localVarPath = `/api/super-admin/service-usage-metric/{serviceUsageMetricId}`
                .replace(`{${"serviceUsageMetricId"}}`, encodeURIComponent(String(serviceUsageMetricId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SubscriptionPlanDto} body 
         * @param {number} subscriptionPlanId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscriptionPlan: async (body: SubscriptionPlanDto, subscriptionPlanId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateSubscriptionPlan.');
            }
            // verify required parameter 'subscriptionPlanId' is not null or undefined
            if (subscriptionPlanId === null || subscriptionPlanId === undefined) {
                throw new RequiredError('subscriptionPlanId','Required parameter subscriptionPlanId was null or undefined when calling updateSubscriptionPlan.');
            }
            const localVarPath = `/api/super-admin/subscription-plan/{subscriptionPlanId}`
                .replace(`{${"subscriptionPlanId"}}`, encodeURIComponent(String(subscriptionPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SuperAdminControllerApi - functional programming interface
 * @export
 */
export const SuperAdminControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {InvoiceDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInvoice(body: InvoiceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Invoice>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).createInvoice(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new organization
         * @param {OrganizationDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganization(body: OrganizationDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Organization>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).createOrganization(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {OrganizationSubscriptionDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganizationSubscription(body: OrganizationSubscriptionDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrganizationSubscription>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).createOrganizationSubscription(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new service
         * @param {ServiceDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createService(body: ServiceDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Service>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).createService(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new service usage metric
         * @param {ServiceUsageMetricDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createServiceUsageMetric(body: ServiceUsageMetricDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ServiceUsageMetric>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).createServiceUsageMetric(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SubscriptionPlanDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscriptionPlan(body: SubscriptionPlanDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SubscriptionPlan>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).createSubscriptionPlan(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} invoiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInvoice(invoiceId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).deleteInvoice(invoiceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganization(mrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).deleteOrganization(mrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganizationCandidate(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).deleteOrganizationCandidate(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} organizationSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganizationSubscription(organizationSubscriptionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).deleteOrganizationSubscription(organizationSubscriptionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteService(serviceId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).deleteService(serviceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} serviceUsageMetricId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteServiceUsageMetric(serviceUsageMetricId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).deleteServiceUsageMetric(serviceUsageMetricId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} subscriptionPlanId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubscriptionPlan(subscriptionPlanId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).deleteSubscriptionPlan(subscriptionPlanId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} invoiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoice(invoiceId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Invoice>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).getInvoice(invoiceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoices(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageInvoice>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).getInvoices(page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get an organization by its MRN
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationByMrn(mrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Organization>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).getOrganizationByMrn(mrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get an organization by its UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationByUuid(uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Organization>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).getOrganizationByUuid(uuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationCandidate(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrganizationCandidate>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).getOrganizationCandidate(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationCandidates(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageOrganizationCandidate>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).getOrganizationCandidates(page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} organizationSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationSubscription(organizationSubscriptionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OrganizationSubscription>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).getOrganizationSubscription(organizationSubscriptionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationSubscriptions(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageOrganizationSubscription>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).getOrganizationSubscriptions(page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizations(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageOrganization>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).getOrganizations(page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getService(serviceId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Service>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).getService(serviceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} serviceUsageMetricId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceUsageMetric(serviceUsageMetricId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ServiceUsageMetric>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).getServiceUsageMetric(serviceUsageMetricId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceUsageMetrics(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageServiceUsageMetric>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).getServiceUsageMetrics(page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServices(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageService>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).getServices(page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} subscriptionPlanId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionPlan(subscriptionPlanId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<SubscriptionPlan>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).getSubscriptionPlan(subscriptionPlanId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionPlans(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageSubscriptionPlan>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).getSubscriptionPlans(page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {InvoiceDto} body 
         * @param {number} invoiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInvoice(body: InvoiceDto, invoiceId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).updateInvoice(body, invoiceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {OrganizationDto} body 
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganization(body: OrganizationDto, mrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).updateOrganization(body, mrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {OrganizationCandidateDto} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganizationCandidate(body: OrganizationCandidateDto, id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).updateOrganizationCandidate(body, id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {OrganizationSubscriptionDto} body 
         * @param {number} organizationSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganizationSubscription(body: OrganizationSubscriptionDto, organizationSubscriptionId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).updateOrganizationSubscription(body, organizationSubscriptionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ServiceDto} body 
         * @param {number} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateService(body: ServiceDto, serviceId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).updateService(body, serviceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {ServiceUsageMetricDto} body 
         * @param {number} serviceUsageMetricId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateServiceUsageMetric(body: ServiceUsageMetricDto, serviceUsageMetricId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).updateServiceUsageMetric(body, serviceUsageMetricId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {SubscriptionPlanDto} body 
         * @param {number} subscriptionPlanId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscriptionPlan(body: SubscriptionPlanDto, subscriptionPlanId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SuperAdminControllerApiAxiosParamCreator(configuration).updateSubscriptionPlan(body, subscriptionPlanId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SuperAdminControllerApi - factory interface
 * @export
 */
export const SuperAdminControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {InvoiceDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInvoice(body: InvoiceDto, options?: AxiosRequestConfig): Promise<AxiosResponse<Invoice>> {
            return SuperAdminControllerApiFp(configuration).createInvoice(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new organization
         * @param {OrganizationDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganization(body: OrganizationDto, options?: AxiosRequestConfig): Promise<AxiosResponse<Organization>> {
            return SuperAdminControllerApiFp(configuration).createOrganization(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrganizationSubscriptionDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganizationSubscription(body: OrganizationSubscriptionDto, options?: AxiosRequestConfig): Promise<AxiosResponse<OrganizationSubscription>> {
            return SuperAdminControllerApiFp(configuration).createOrganizationSubscription(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new service
         * @param {ServiceDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createService(body: ServiceDto, options?: AxiosRequestConfig): Promise<AxiosResponse<Service>> {
            return SuperAdminControllerApiFp(configuration).createService(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new service usage metric
         * @param {ServiceUsageMetricDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createServiceUsageMetric(body: ServiceUsageMetricDto, options?: AxiosRequestConfig): Promise<AxiosResponse<ServiceUsageMetric>> {
            return SuperAdminControllerApiFp(configuration).createServiceUsageMetric(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionPlanDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSubscriptionPlan(body: SubscriptionPlanDto, options?: AxiosRequestConfig): Promise<AxiosResponse<SubscriptionPlan>> {
            return SuperAdminControllerApiFp(configuration).createSubscriptionPlan(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} invoiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteInvoice(invoiceId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SuperAdminControllerApiFp(configuration).deleteInvoice(invoiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganization(mrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SuperAdminControllerApiFp(configuration).deleteOrganization(mrn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganizationCandidate(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SuperAdminControllerApiFp(configuration).deleteOrganizationCandidate(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} organizationSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrganizationSubscription(organizationSubscriptionId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SuperAdminControllerApiFp(configuration).deleteOrganizationSubscription(organizationSubscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteService(serviceId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SuperAdminControllerApiFp(configuration).deleteService(serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} serviceUsageMetricId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteServiceUsageMetric(serviceUsageMetricId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SuperAdminControllerApiFp(configuration).deleteServiceUsageMetric(serviceUsageMetricId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} subscriptionPlanId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSubscriptionPlan(subscriptionPlanId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SuperAdminControllerApiFp(configuration).deleteSubscriptionPlan(subscriptionPlanId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} invoiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoice(invoiceId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Invoice>> {
            return SuperAdminControllerApiFp(configuration).getInvoice(invoiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoices(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageInvoice>> {
            return SuperAdminControllerApiFp(configuration).getInvoices(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an organization by its MRN
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationByMrn(mrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Organization>> {
            return SuperAdminControllerApiFp(configuration).getOrganizationByMrn(mrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get an organization by its UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationByUuid(uuid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Organization>> {
            return SuperAdminControllerApiFp(configuration).getOrganizationByUuid(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationCandidate(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<OrganizationCandidate>> {
            return SuperAdminControllerApiFp(configuration).getOrganizationCandidate(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationCandidates(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageOrganizationCandidate>> {
            return SuperAdminControllerApiFp(configuration).getOrganizationCandidates(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} organizationSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationSubscription(organizationSubscriptionId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<OrganizationSubscription>> {
            return SuperAdminControllerApiFp(configuration).getOrganizationSubscription(organizationSubscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationSubscriptions(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageOrganizationSubscription>> {
            return SuperAdminControllerApiFp(configuration).getOrganizationSubscriptions(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizations(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageOrganization>> {
            return SuperAdminControllerApiFp(configuration).getOrganizations(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getService(serviceId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Service>> {
            return SuperAdminControllerApiFp(configuration).getService(serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} serviceUsageMetricId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceUsageMetric(serviceUsageMetricId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<ServiceUsageMetric>> {
            return SuperAdminControllerApiFp(configuration).getServiceUsageMetric(serviceUsageMetricId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceUsageMetrics(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageServiceUsageMetric>> {
            return SuperAdminControllerApiFp(configuration).getServiceUsageMetrics(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServices(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageService>> {
            return SuperAdminControllerApiFp(configuration).getServices(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} subscriptionPlanId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionPlan(subscriptionPlanId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<SubscriptionPlan>> {
            return SuperAdminControllerApiFp(configuration).getSubscriptionPlan(subscriptionPlanId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionPlans(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageSubscriptionPlan>> {
            return SuperAdminControllerApiFp(configuration).getSubscriptionPlans(page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {InvoiceDto} body 
         * @param {number} invoiceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateInvoice(body: InvoiceDto, invoiceId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SuperAdminControllerApiFp(configuration).updateInvoice(body, invoiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrganizationDto} body 
         * @param {string} mrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganization(body: OrganizationDto, mrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SuperAdminControllerApiFp(configuration).updateOrganization(body, mrn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrganizationCandidateDto} body 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganizationCandidate(body: OrganizationCandidateDto, id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SuperAdminControllerApiFp(configuration).updateOrganizationCandidate(body, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OrganizationSubscriptionDto} body 
         * @param {number} organizationSubscriptionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrganizationSubscription(body: OrganizationSubscriptionDto, organizationSubscriptionId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SuperAdminControllerApiFp(configuration).updateOrganizationSubscription(body, organizationSubscriptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServiceDto} body 
         * @param {number} serviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateService(body: ServiceDto, serviceId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SuperAdminControllerApiFp(configuration).updateService(body, serviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ServiceUsageMetricDto} body 
         * @param {number} serviceUsageMetricId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateServiceUsageMetric(body: ServiceUsageMetricDto, serviceUsageMetricId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SuperAdminControllerApiFp(configuration).updateServiceUsageMetric(body, serviceUsageMetricId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SubscriptionPlanDto} body 
         * @param {number} subscriptionPlanId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscriptionPlan(body: SubscriptionPlanDto, subscriptionPlanId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SuperAdminControllerApiFp(configuration).updateSubscriptionPlan(body, subscriptionPlanId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SuperAdminControllerApi - object-oriented interface
 * @export
 * @class SuperAdminControllerApi
 * @extends {BaseAPI}
 */
export class SuperAdminControllerApi extends BaseAPI {
    /**
     * 
     * @param {InvoiceDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async createInvoice(body: InvoiceDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<Invoice>> {
        return SuperAdminControllerApiFp(this.configuration).createInvoice(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new organization
     * @param {OrganizationDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async createOrganization(body: OrganizationDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<Organization>> {
        return SuperAdminControllerApiFp(this.configuration).createOrganization(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {OrganizationSubscriptionDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async createOrganizationSubscription(body: OrganizationSubscriptionDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrganizationSubscription>> {
        return SuperAdminControllerApiFp(this.configuration).createOrganizationSubscription(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new service
     * @param {ServiceDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async createService(body: ServiceDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<Service>> {
        return SuperAdminControllerApiFp(this.configuration).createService(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new service usage metric
     * @param {ServiceUsageMetricDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async createServiceUsageMetric(body: ServiceUsageMetricDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<ServiceUsageMetric>> {
        return SuperAdminControllerApiFp(this.configuration).createServiceUsageMetric(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {SubscriptionPlanDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async createSubscriptionPlan(body: SubscriptionPlanDto, options?: AxiosRequestConfig) : Promise<AxiosResponse<SubscriptionPlan>> {
        return SuperAdminControllerApiFp(this.configuration).createSubscriptionPlan(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} invoiceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async deleteInvoice(invoiceId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SuperAdminControllerApiFp(this.configuration).deleteInvoice(invoiceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {string} mrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async deleteOrganization(mrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SuperAdminControllerApiFp(this.configuration).deleteOrganization(mrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async deleteOrganizationCandidate(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SuperAdminControllerApiFp(this.configuration).deleteOrganizationCandidate(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} organizationSubscriptionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async deleteOrganizationSubscription(organizationSubscriptionId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SuperAdminControllerApiFp(this.configuration).deleteOrganizationSubscription(organizationSubscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} serviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async deleteService(serviceId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SuperAdminControllerApiFp(this.configuration).deleteService(serviceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} serviceUsageMetricId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async deleteServiceUsageMetric(serviceUsageMetricId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SuperAdminControllerApiFp(this.configuration).deleteServiceUsageMetric(serviceUsageMetricId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} subscriptionPlanId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async deleteSubscriptionPlan(subscriptionPlanId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SuperAdminControllerApiFp(this.configuration).deleteSubscriptionPlan(subscriptionPlanId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} invoiceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async getInvoice(invoiceId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Invoice>> {
        return SuperAdminControllerApiFp(this.configuration).getInvoice(invoiceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async getInvoices(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageInvoice>> {
        return SuperAdminControllerApiFp(this.configuration).getInvoices(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an organization by its MRN
     * @param {string} mrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async getOrganizationByMrn(mrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Organization>> {
        return SuperAdminControllerApiFp(this.configuration).getOrganizationByMrn(mrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get an organization by its UUID
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async getOrganizationByUuid(uuid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Organization>> {
        return SuperAdminControllerApiFp(this.configuration).getOrganizationByUuid(uuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async getOrganizationCandidate(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrganizationCandidate>> {
        return SuperAdminControllerApiFp(this.configuration).getOrganizationCandidate(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async getOrganizationCandidates(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageOrganizationCandidate>> {
        return SuperAdminControllerApiFp(this.configuration).getOrganizationCandidates(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} organizationSubscriptionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async getOrganizationSubscription(organizationSubscriptionId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<OrganizationSubscription>> {
        return SuperAdminControllerApiFp(this.configuration).getOrganizationSubscription(organizationSubscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async getOrganizationSubscriptions(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageOrganizationSubscription>> {
        return SuperAdminControllerApiFp(this.configuration).getOrganizationSubscriptions(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async getOrganizations(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageOrganization>> {
        return SuperAdminControllerApiFp(this.configuration).getOrganizations(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} serviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async getService(serviceId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Service>> {
        return SuperAdminControllerApiFp(this.configuration).getService(serviceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} serviceUsageMetricId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async getServiceUsageMetric(serviceUsageMetricId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<ServiceUsageMetric>> {
        return SuperAdminControllerApiFp(this.configuration).getServiceUsageMetric(serviceUsageMetricId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async getServiceUsageMetrics(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageServiceUsageMetric>> {
        return SuperAdminControllerApiFp(this.configuration).getServiceUsageMetrics(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async getServices(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageService>> {
        return SuperAdminControllerApiFp(this.configuration).getServices(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} subscriptionPlanId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async getSubscriptionPlan(subscriptionPlanId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<SubscriptionPlan>> {
        return SuperAdminControllerApiFp(this.configuration).getSubscriptionPlan(subscriptionPlanId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async getSubscriptionPlans(page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageSubscriptionPlan>> {
        return SuperAdminControllerApiFp(this.configuration).getSubscriptionPlans(page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {InvoiceDto} body 
     * @param {number} invoiceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async updateInvoice(body: InvoiceDto, invoiceId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SuperAdminControllerApiFp(this.configuration).updateInvoice(body, invoiceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {OrganizationDto} body 
     * @param {string} mrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async updateOrganization(body: OrganizationDto, mrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SuperAdminControllerApiFp(this.configuration).updateOrganization(body, mrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {OrganizationCandidateDto} body 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async updateOrganizationCandidate(body: OrganizationCandidateDto, id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SuperAdminControllerApiFp(this.configuration).updateOrganizationCandidate(body, id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {OrganizationSubscriptionDto} body 
     * @param {number} organizationSubscriptionId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async updateOrganizationSubscription(body: OrganizationSubscriptionDto, organizationSubscriptionId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SuperAdminControllerApiFp(this.configuration).updateOrganizationSubscription(body, organizationSubscriptionId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {ServiceDto} body 
     * @param {number} serviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async updateService(body: ServiceDto, serviceId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SuperAdminControllerApiFp(this.configuration).updateService(body, serviceId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {ServiceUsageMetricDto} body 
     * @param {number} serviceUsageMetricId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async updateServiceUsageMetric(body: ServiceUsageMetricDto, serviceUsageMetricId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SuperAdminControllerApiFp(this.configuration).updateServiceUsageMetric(body, serviceUsageMetricId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @param {SubscriptionPlanDto} body 
     * @param {number} subscriptionPlanId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SuperAdminControllerApi
     */
    public async updateSubscriptionPlan(body: SubscriptionPlanDto, subscriptionPlanId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SuperAdminControllerApiFp(this.configuration).updateSubscriptionPlan(body, subscriptionPlanId, options).then((request) => request(this.axios, this.basePath));
    }
}
