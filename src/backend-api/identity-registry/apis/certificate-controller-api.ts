/* tslint:disable */
/* eslint-disable */
/**
 * Maritime Connectivity Platform Identity Registry API
 * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\"https://api.aivn.kr/v3/api-docs/mcp-idreg-oidc\">here</a> and <a href=\"https://api-x509.aivn.kr/v3/api-docs/mcp-idreg-x509\">here</a>.
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@maritimeconnectivity.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
/**
 * CertificateControllerApi - axios parameter creator
 * @export
 */
export const CertificateControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the CRL of the specified CA
         * @param {string} caAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCRL: async (caAlias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caAlias' is not null or undefined
            if (caAlias === null || caAlias === undefined) {
                throw new RequiredError('caAlias','Required parameter caAlias was null or undefined when calling getCRL.');
            }
            const localVarPath = `/oidc/api/certificates/crl/{caAlias}`
                .replace(`{${"caAlias"}}`, encodeURIComponent(String(caAlias)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the CRL of the specified CA
         * @param {string} caAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCRL1: async (caAlias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caAlias' is not null or undefined
            if (caAlias === null || caAlias === undefined) {
                throw new RequiredError('caAlias','Required parameter caAlias was null or undefined when calling getCRL1.');
            }
            const localVarPath = `/x509/api/certificates/crl/{caAlias}`
                .replace(`{${"caAlias"}}`, encodeURIComponent(String(caAlias)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * GET mapping for OCSP
         * @param {string} caAlias 
         * @param {string} ocspRequest OCSP request that is encoded as defined in RFC 6960 Appendix A.1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOCSP: async (caAlias: string, ocspRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caAlias' is not null or undefined
            if (caAlias === null || caAlias === undefined) {
                throw new RequiredError('caAlias','Required parameter caAlias was null or undefined when calling getOCSP.');
            }
            // verify required parameter 'ocspRequest' is not null or undefined
            if (ocspRequest === null || ocspRequest === undefined) {
                throw new RequiredError('ocspRequest','Required parameter ocspRequest was null or undefined when calling getOCSP.');
            }
            const localVarPath = `/oidc/api/certificates/ocsp/{caAlias}/{ocspRequest}`
                .replace(`{${"caAlias"}}`, encodeURIComponent(String(caAlias)))
                .replace(`{${"ocspRequest"}}`, encodeURIComponent(String(ocspRequest)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * GET mapping for OCSP
         * @param {string} caAlias 
         * @param {string} ocspRequest OCSP request that is encoded as defined in RFC 6960 Appendix A.1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOCSP1: async (caAlias: string, ocspRequest: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'caAlias' is not null or undefined
            if (caAlias === null || caAlias === undefined) {
                throw new RequiredError('caAlias','Required parameter caAlias was null or undefined when calling getOCSP1.');
            }
            // verify required parameter 'ocspRequest' is not null or undefined
            if (ocspRequest === null || ocspRequest === undefined) {
                throw new RequiredError('ocspRequest','Required parameter ocspRequest was null or undefined when calling getOCSP1.');
            }
            const localVarPath = `/x509/api/certificates/ocsp/{caAlias}/{ocspRequest}`
                .replace(`{${"caAlias"}}`, encodeURIComponent(String(caAlias)))
                .replace(`{${"ocspRequest"}}`, encodeURIComponent(String(ocspRequest)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * POST mapping for OCSP
         * @param {Array<string>} body OCSP request that is encoded as defined in RFC 6960 Appendix A.1
         * @param {string} caAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOCSP: async (body: Array<string>, caAlias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postOCSP.');
            }
            // verify required parameter 'caAlias' is not null or undefined
            if (caAlias === null || caAlias === undefined) {
                throw new RequiredError('caAlias','Required parameter caAlias was null or undefined when calling postOCSP.');
            }
            const localVarPath = `/x509/api/certificates/ocsp/{caAlias}`
                .replace(`{${"caAlias"}}`, encodeURIComponent(String(caAlias)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/ocsp-request';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * POST mapping for OCSP
         * @param {Array<string>} body OCSP request that is encoded as defined in RFC 6960 Appendix A.1
         * @param {string} caAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOCSP1: async (body: Array<string>, caAlias: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling postOCSP1.');
            }
            // verify required parameter 'caAlias' is not null or undefined
            if (caAlias === null || caAlias === undefined) {
                throw new RequiredError('caAlias','Required parameter caAlias was null or undefined when calling postOCSP1.');
            }
            const localVarPath = `/oidc/api/certificates/ocsp/{caAlias}`
                .replace(`{${"caAlias"}}`, encodeURIComponent(String(caAlias)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/ocsp-request';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CertificateControllerApi - functional programming interface
 * @export
 */
export const CertificateControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get the CRL of the specified CA
         * @param {string} caAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCRL(caAlias: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await CertificateControllerApiAxiosParamCreator(configuration).getCRL(caAlias, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the CRL of the specified CA
         * @param {string} caAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCRL1(caAlias: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await CertificateControllerApiAxiosParamCreator(configuration).getCRL1(caAlias, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * GET mapping for OCSP
         * @param {string} caAlias 
         * @param {string} ocspRequest OCSP request that is encoded as defined in RFC 6960 Appendix A.1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOCSP(caAlias: string, ocspRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await CertificateControllerApiAxiosParamCreator(configuration).getOCSP(caAlias, ocspRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * GET mapping for OCSP
         * @param {string} caAlias 
         * @param {string} ocspRequest OCSP request that is encoded as defined in RFC 6960 Appendix A.1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOCSP1(caAlias: string, ocspRequest: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await CertificateControllerApiAxiosParamCreator(configuration).getOCSP1(caAlias, ocspRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * POST mapping for OCSP
         * @param {Array<string>} body OCSP request that is encoded as defined in RFC 6960 Appendix A.1
         * @param {string} caAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOCSP(body: Array<string>, caAlias: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await CertificateControllerApiAxiosParamCreator(configuration).postOCSP(body, caAlias, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * POST mapping for OCSP
         * @param {Array<string>} body OCSP request that is encoded as defined in RFC 6960 Appendix A.1
         * @param {string} caAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOCSP1(body: Array<string>, caAlias: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await CertificateControllerApiAxiosParamCreator(configuration).postOCSP1(body, caAlias, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CertificateControllerApi - factory interface
 * @export
 */
export const CertificateControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get the CRL of the specified CA
         * @param {string} caAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCRL(caAlias: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return CertificateControllerApiFp(configuration).getCRL(caAlias, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the CRL of the specified CA
         * @param {string} caAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCRL1(caAlias: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return CertificateControllerApiFp(configuration).getCRL1(caAlias, options).then((request) => request(axios, basePath));
        },
        /**
         * GET mapping for OCSP
         * @param {string} caAlias 
         * @param {string} ocspRequest OCSP request that is encoded as defined in RFC 6960 Appendix A.1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOCSP(caAlias: string, ocspRequest: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return CertificateControllerApiFp(configuration).getOCSP(caAlias, ocspRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * GET mapping for OCSP
         * @param {string} caAlias 
         * @param {string} ocspRequest OCSP request that is encoded as defined in RFC 6960 Appendix A.1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOCSP1(caAlias: string, ocspRequest: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return CertificateControllerApiFp(configuration).getOCSP1(caAlias, ocspRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * POST mapping for OCSP
         * @param {Array<string>} body OCSP request that is encoded as defined in RFC 6960 Appendix A.1
         * @param {string} caAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOCSP(body: Array<string>, caAlias: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return CertificateControllerApiFp(configuration).postOCSP(body, caAlias, options).then((request) => request(axios, basePath));
        },
        /**
         * POST mapping for OCSP
         * @param {Array<string>} body OCSP request that is encoded as defined in RFC 6960 Appendix A.1
         * @param {string} caAlias 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postOCSP1(body: Array<string>, caAlias: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return CertificateControllerApiFp(configuration).postOCSP1(body, caAlias, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CertificateControllerApi - object-oriented interface
 * @export
 * @class CertificateControllerApi
 * @extends {BaseAPI}
 */
export class CertificateControllerApi extends BaseAPI {
    /**
     * Get the CRL of the specified CA
     * @param {string} caAlias 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificateControllerApi
     */
    public async getCRL(caAlias: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return CertificateControllerApiFp(this.configuration).getCRL(caAlias, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the CRL of the specified CA
     * @param {string} caAlias 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificateControllerApi
     */
    public async getCRL1(caAlias: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return CertificateControllerApiFp(this.configuration).getCRL1(caAlias, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * GET mapping for OCSP
     * @param {string} caAlias 
     * @param {string} ocspRequest OCSP request that is encoded as defined in RFC 6960 Appendix A.1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificateControllerApi
     */
    public async getOCSP(caAlias: string, ocspRequest: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return CertificateControllerApiFp(this.configuration).getOCSP(caAlias, ocspRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * GET mapping for OCSP
     * @param {string} caAlias 
     * @param {string} ocspRequest OCSP request that is encoded as defined in RFC 6960 Appendix A.1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificateControllerApi
     */
    public async getOCSP1(caAlias: string, ocspRequest: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return CertificateControllerApiFp(this.configuration).getOCSP1(caAlias, ocspRequest, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * POST mapping for OCSP
     * @param {Array<string>} body OCSP request that is encoded as defined in RFC 6960 Appendix A.1
     * @param {string} caAlias 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificateControllerApi
     */
    public async postOCSP(body: Array<string>, caAlias: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return CertificateControllerApiFp(this.configuration).postOCSP(body, caAlias, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * POST mapping for OCSP
     * @param {Array<string>} body OCSP request that is encoded as defined in RFC 6960 Appendix A.1
     * @param {string} caAlias 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CertificateControllerApi
     */
    public async postOCSP1(body: Array<string>, caAlias: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return CertificateControllerApiFp(this.configuration).postOCSP1(body, caAlias, options).then((request) => request(this.axios, this.basePath));
    }
}
