/* tslint:disable */
/* eslint-disable */
/**
 * Maritime Connectivity Platform Identity Registry API
 * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\"https://api.aivn.kr/v3/api-docs/mcp-idreg-oidc\">here</a> and <a href=\"https://api-x509.aivn.kr/v3/api-docs/mcp-idreg-x509\">here</a>.
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@maritimeconnectivity.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Certificate } from '../models';
import { CertificateRevocation } from '../models';
import { Device } from '../models';
import { PageDevice } from '../models';
/**
 * DeviceControllerApi - axios parameter creator
 * @export
 */
export const DeviceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new device identity
         * @param {Device} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice: async (body: Device, orgMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createDevice.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling createDevice.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/device`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new device identity
         * @param {Device} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDevice1: async (body: Device, orgMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createDevice1.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling createDevice1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/device`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a device identity
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice: async (orgMrn: string, deviceMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling deleteDevice.');
            }
            // verify required parameter 'deviceMrn' is not null or undefined
            if (deviceMrn === null || deviceMrn === undefined) {
                throw new RequiredError('deviceMrn','Required parameter deviceMrn was null or undefined when calling deleteDevice.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/device/{deviceMrn}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"deviceMrn"}}`, encodeURIComponent(String(deviceMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a device identity
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice1: async (orgMrn: string, deviceMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling deleteDevice1.');
            }
            // verify required parameter 'deviceMrn' is not null or undefined
            if (deviceMrn === null || deviceMrn === undefined) {
                throw new RequiredError('deviceMrn','Required parameter deviceMrn was null or undefined when calling deleteDevice1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/device/{deviceMrn}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"deviceMrn"}}`, encodeURIComponent(String(deviceMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific device identity
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevice: async (orgMrn: string, deviceMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getDevice.');
            }
            // verify required parameter 'deviceMrn' is not null or undefined
            if (deviceMrn === null || deviceMrn === undefined) {
                throw new RequiredError('deviceMrn','Required parameter deviceMrn was null or undefined when calling getDevice.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/device/{deviceMrn}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"deviceMrn"}}`, encodeURIComponent(String(deviceMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific device identity
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDevice1: async (orgMrn: string, deviceMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getDevice1.');
            }
            // verify required parameter 'deviceMrn' is not null or undefined
            if (deviceMrn === null || deviceMrn === undefined) {
                throw new RequiredError('deviceMrn','Required parameter deviceMrn was null or undefined when calling getDevice1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/device/{deviceMrn}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"deviceMrn"}}`, encodeURIComponent(String(deviceMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the certificate of the specified device with the specified serial number
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {number} serialNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceCert: async (orgMrn: string, deviceMrn: string, serialNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getDeviceCert.');
            }
            // verify required parameter 'deviceMrn' is not null or undefined
            if (deviceMrn === null || deviceMrn === undefined) {
                throw new RequiredError('deviceMrn','Required parameter deviceMrn was null or undefined when calling getDeviceCert.');
            }
            // verify required parameter 'serialNumber' is not null or undefined
            if (serialNumber === null || serialNumber === undefined) {
                throw new RequiredError('serialNumber','Required parameter serialNumber was null or undefined when calling getDeviceCert.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/device/{deviceMrn}/certificate/{serialNumber}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"deviceMrn"}}`, encodeURIComponent(String(deviceMrn)))
                .replace(`{${"serialNumber"}}`, encodeURIComponent(String(serialNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the certificate of the specified device with the specified serial number
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {number} serialNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceCert1: async (orgMrn: string, deviceMrn: string, serialNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getDeviceCert1.');
            }
            // verify required parameter 'deviceMrn' is not null or undefined
            if (deviceMrn === null || deviceMrn === undefined) {
                throw new RequiredError('deviceMrn','Required parameter deviceMrn was null or undefined when calling getDeviceCert1.');
            }
            // verify required parameter 'serialNumber' is not null or undefined
            if (serialNumber === null || serialNumber === undefined) {
                throw new RequiredError('serialNumber','Required parameter serialNumber was null or undefined when calling getDeviceCert1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/device/{deviceMrn}/certificate/{serialNumber}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"deviceMrn"}}`, encodeURIComponent(String(deviceMrn)))
                .replace(`{${"serialNumber"}}`, encodeURIComponent(String(serialNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a page of device identities of the specified organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationDevices: async (orgMrn: string, page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getOrganizationDevices.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/devices`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a page of device identities of the specified organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationDevices1: async (orgMrn: string, page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getOrganizationDevices1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/devices`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new device certificate using CSR
         * @param {string} body A PEM encoded PKCS#10 CSR
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newDeviceCertFromCsr: async (body: string, orgMrn: string, deviceMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling newDeviceCertFromCsr.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling newDeviceCertFromCsr.');
            }
            // verify required parameter 'deviceMrn' is not null or undefined
            if (deviceMrn === null || deviceMrn === undefined) {
                throw new RequiredError('deviceMrn','Required parameter deviceMrn was null or undefined when calling newDeviceCertFromCsr.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/device/{deviceMrn}/certificate/issue-new/csr`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"deviceMrn"}}`, encodeURIComponent(String(deviceMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/x-pem-file';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new device certificate using CSR
         * @param {string} body A PEM encoded PKCS#10 CSR
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newDeviceCertFromCsr1: async (body: string, orgMrn: string, deviceMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling newDeviceCertFromCsr1.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling newDeviceCertFromCsr1.');
            }
            // verify required parameter 'deviceMrn' is not null or undefined
            if (deviceMrn === null || deviceMrn === undefined) {
                throw new RequiredError('deviceMrn','Required parameter deviceMrn was null or undefined when calling newDeviceCertFromCsr1.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/device/{deviceMrn}/certificate/issue-new/csr`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"deviceMrn"}}`, encodeURIComponent(String(deviceMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/x-pem-file';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke the device certificate with the given serial number
         * @param {CertificateRevocation} body 
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {number} certId The serial number of the certificate given in decimal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeDeviceCert: async (body: CertificateRevocation, orgMrn: string, deviceMrn: string, certId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling revokeDeviceCert.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling revokeDeviceCert.');
            }
            // verify required parameter 'deviceMrn' is not null or undefined
            if (deviceMrn === null || deviceMrn === undefined) {
                throw new RequiredError('deviceMrn','Required parameter deviceMrn was null or undefined when calling revokeDeviceCert.');
            }
            // verify required parameter 'certId' is not null or undefined
            if (certId === null || certId === undefined) {
                throw new RequiredError('certId','Required parameter certId was null or undefined when calling revokeDeviceCert.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/device/{deviceMrn}/certificate/{certId}/revoke`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"deviceMrn"}}`, encodeURIComponent(String(deviceMrn)))
                .replace(`{${"certId"}}`, encodeURIComponent(String(certId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke the device certificate with the given serial number
         * @param {CertificateRevocation} body 
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {number} certId The serial number of the certificate given in decimal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeDeviceCert1: async (body: CertificateRevocation, orgMrn: string, deviceMrn: string, certId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling revokeDeviceCert1.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling revokeDeviceCert1.');
            }
            // verify required parameter 'deviceMrn' is not null or undefined
            if (deviceMrn === null || deviceMrn === undefined) {
                throw new RequiredError('deviceMrn','Required parameter deviceMrn was null or undefined when calling revokeDeviceCert1.');
            }
            // verify required parameter 'certId' is not null or undefined
            if (certId === null || certId === undefined) {
                throw new RequiredError('certId','Required parameter certId was null or undefined when calling revokeDeviceCert1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/device/{deviceMrn}/certificate/{certId}/revoke`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"deviceMrn"}}`, encodeURIComponent(String(deviceMrn)))
                .replace(`{${"certId"}}`, encodeURIComponent(String(certId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing device identity
         * @param {Device} body 
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevice: async (body: Device, orgMrn: string, deviceMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateDevice.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling updateDevice.');
            }
            // verify required parameter 'deviceMrn' is not null or undefined
            if (deviceMrn === null || deviceMrn === undefined) {
                throw new RequiredError('deviceMrn','Required parameter deviceMrn was null or undefined when calling updateDevice.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/device/{deviceMrn}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"deviceMrn"}}`, encodeURIComponent(String(deviceMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing device identity
         * @param {Device} body 
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevice1: async (body: Device, orgMrn: string, deviceMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateDevice1.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling updateDevice1.');
            }
            // verify required parameter 'deviceMrn' is not null or undefined
            if (deviceMrn === null || deviceMrn === undefined) {
                throw new RequiredError('deviceMrn','Required parameter deviceMrn was null or undefined when calling updateDevice1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/device/{deviceMrn}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"deviceMrn"}}`, encodeURIComponent(String(deviceMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceControllerApi - functional programming interface
 * @export
 */
export const DeviceControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new device identity
         * @param {Device} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDevice(body: Device, orgMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Device>>> {
            const localVarAxiosArgs = await DeviceControllerApiAxiosParamCreator(configuration).createDevice(body, orgMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new device identity
         * @param {Device} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDevice1(body: Device, orgMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Device>>> {
            const localVarAxiosArgs = await DeviceControllerApiAxiosParamCreator(configuration).createDevice1(body, orgMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a device identity
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDevice(orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DeviceControllerApiAxiosParamCreator(configuration).deleteDevice(orgMrn, deviceMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a device identity
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDevice1(orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DeviceControllerApiAxiosParamCreator(configuration).deleteDevice1(orgMrn, deviceMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a specific device identity
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevice(orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Device>>> {
            const localVarAxiosArgs = await DeviceControllerApiAxiosParamCreator(configuration).getDevice(orgMrn, deviceMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a specific device identity
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevice1(orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Device>>> {
            const localVarAxiosArgs = await DeviceControllerApiAxiosParamCreator(configuration).getDevice1(orgMrn, deviceMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the certificate of the specified device with the specified serial number
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {number} serialNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceCert(orgMrn: string, deviceMrn: string, serialNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Certificate>>> {
            const localVarAxiosArgs = await DeviceControllerApiAxiosParamCreator(configuration).getDeviceCert(orgMrn, deviceMrn, serialNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the certificate of the specified device with the specified serial number
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {number} serialNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceCert1(orgMrn: string, deviceMrn: string, serialNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Certificate>>> {
            const localVarAxiosArgs = await DeviceControllerApiAxiosParamCreator(configuration).getDeviceCert1(orgMrn, deviceMrn, serialNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a page of device identities of the specified organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationDevices(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageDevice>>> {
            const localVarAxiosArgs = await DeviceControllerApiAxiosParamCreator(configuration).getOrganizationDevices(orgMrn, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a page of device identities of the specified organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationDevices1(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageDevice>>> {
            const localVarAxiosArgs = await DeviceControllerApiAxiosParamCreator(configuration).getOrganizationDevices1(orgMrn, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new device certificate using CSR
         * @param {string} body A PEM encoded PKCS#10 CSR
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newDeviceCertFromCsr(body: string, orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DeviceControllerApiAxiosParamCreator(configuration).newDeviceCertFromCsr(body, orgMrn, deviceMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new device certificate using CSR
         * @param {string} body A PEM encoded PKCS#10 CSR
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newDeviceCertFromCsr1(body: string, orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DeviceControllerApiAxiosParamCreator(configuration).newDeviceCertFromCsr1(body, orgMrn, deviceMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Revoke the device certificate with the given serial number
         * @param {CertificateRevocation} body 
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {number} certId The serial number of the certificate given in decimal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeDeviceCert(body: CertificateRevocation, orgMrn: string, deviceMrn: string, certId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DeviceControllerApiAxiosParamCreator(configuration).revokeDeviceCert(body, orgMrn, deviceMrn, certId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Revoke the device certificate with the given serial number
         * @param {CertificateRevocation} body 
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {number} certId The serial number of the certificate given in decimal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeDeviceCert1(body: CertificateRevocation, orgMrn: string, deviceMrn: string, certId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DeviceControllerApiAxiosParamCreator(configuration).revokeDeviceCert1(body, orgMrn, deviceMrn, certId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an existing device identity
         * @param {Device} body 
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDevice(body: Device, orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DeviceControllerApiAxiosParamCreator(configuration).updateDevice(body, orgMrn, deviceMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an existing device identity
         * @param {Device} body 
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDevice1(body: Device, orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await DeviceControllerApiAxiosParamCreator(configuration).updateDevice1(body, orgMrn, deviceMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DeviceControllerApi - factory interface
 * @export
 */
export const DeviceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new device identity
         * @param {Device} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDevice(body: Device, orgMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Device>> {
            return DeviceControllerApiFp(configuration).createDevice(body, orgMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new device identity
         * @param {Device} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDevice1(body: Device, orgMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Device>> {
            return DeviceControllerApiFp(configuration).createDevice1(body, orgMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a device identity
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDevice(orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DeviceControllerApiFp(configuration).deleteDevice(orgMrn, deviceMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a device identity
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDevice1(orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DeviceControllerApiFp(configuration).deleteDevice1(orgMrn, deviceMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific device identity
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevice(orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Device>> {
            return DeviceControllerApiFp(configuration).getDevice(orgMrn, deviceMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific device identity
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDevice1(orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Device>> {
            return DeviceControllerApiFp(configuration).getDevice1(orgMrn, deviceMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the certificate of the specified device with the specified serial number
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {number} serialNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceCert(orgMrn: string, deviceMrn: string, serialNumber: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Certificate>> {
            return DeviceControllerApiFp(configuration).getDeviceCert(orgMrn, deviceMrn, serialNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the certificate of the specified device with the specified serial number
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {number} serialNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceCert1(orgMrn: string, deviceMrn: string, serialNumber: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Certificate>> {
            return DeviceControllerApiFp(configuration).getDeviceCert1(orgMrn, deviceMrn, serialNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a page of device identities of the specified organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationDevices(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageDevice>> {
            return DeviceControllerApiFp(configuration).getOrganizationDevices(orgMrn, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a page of device identities of the specified organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationDevices1(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageDevice>> {
            return DeviceControllerApiFp(configuration).getOrganizationDevices1(orgMrn, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new device certificate using CSR
         * @param {string} body A PEM encoded PKCS#10 CSR
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newDeviceCertFromCsr(body: string, orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DeviceControllerApiFp(configuration).newDeviceCertFromCsr(body, orgMrn, deviceMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new device certificate using CSR
         * @param {string} body A PEM encoded PKCS#10 CSR
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newDeviceCertFromCsr1(body: string, orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DeviceControllerApiFp(configuration).newDeviceCertFromCsr1(body, orgMrn, deviceMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke the device certificate with the given serial number
         * @param {CertificateRevocation} body 
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {number} certId The serial number of the certificate given in decimal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeDeviceCert(body: CertificateRevocation, orgMrn: string, deviceMrn: string, certId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DeviceControllerApiFp(configuration).revokeDeviceCert(body, orgMrn, deviceMrn, certId, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke the device certificate with the given serial number
         * @param {CertificateRevocation} body 
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {number} certId The serial number of the certificate given in decimal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeDeviceCert1(body: CertificateRevocation, orgMrn: string, deviceMrn: string, certId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DeviceControllerApiFp(configuration).revokeDeviceCert1(body, orgMrn, deviceMrn, certId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing device identity
         * @param {Device} body 
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDevice(body: Device, orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DeviceControllerApiFp(configuration).updateDevice(body, orgMrn, deviceMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing device identity
         * @param {Device} body 
         * @param {string} orgMrn 
         * @param {string} deviceMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDevice1(body: Device, orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return DeviceControllerApiFp(configuration).updateDevice1(body, orgMrn, deviceMrn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeviceControllerApi - object-oriented interface
 * @export
 * @class DeviceControllerApi
 * @extends {BaseAPI}
 */
export class DeviceControllerApi extends BaseAPI {
    /**
     * Create a new device identity
     * @param {Device} body 
     * @param {string} orgMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public async createDevice(body: Device, orgMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Device>> {
        return DeviceControllerApiFp(this.configuration).createDevice(body, orgMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new device identity
     * @param {Device} body 
     * @param {string} orgMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public async createDevice1(body: Device, orgMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Device>> {
        return DeviceControllerApiFp(this.configuration).createDevice1(body, orgMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a device identity
     * @param {string} orgMrn 
     * @param {string} deviceMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public async deleteDevice(orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DeviceControllerApiFp(this.configuration).deleteDevice(orgMrn, deviceMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a device identity
     * @param {string} orgMrn 
     * @param {string} deviceMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public async deleteDevice1(orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DeviceControllerApiFp(this.configuration).deleteDevice1(orgMrn, deviceMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a specific device identity
     * @param {string} orgMrn 
     * @param {string} deviceMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public async getDevice(orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Device>> {
        return DeviceControllerApiFp(this.configuration).getDevice(orgMrn, deviceMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a specific device identity
     * @param {string} orgMrn 
     * @param {string} deviceMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public async getDevice1(orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Device>> {
        return DeviceControllerApiFp(this.configuration).getDevice1(orgMrn, deviceMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the certificate of the specified device with the specified serial number
     * @param {string} orgMrn 
     * @param {string} deviceMrn 
     * @param {number} serialNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public async getDeviceCert(orgMrn: string, deviceMrn: string, serialNumber: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Certificate>> {
        return DeviceControllerApiFp(this.configuration).getDeviceCert(orgMrn, deviceMrn, serialNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the certificate of the specified device with the specified serial number
     * @param {string} orgMrn 
     * @param {string} deviceMrn 
     * @param {number} serialNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public async getDeviceCert1(orgMrn: string, deviceMrn: string, serialNumber: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Certificate>> {
        return DeviceControllerApiFp(this.configuration).getDeviceCert1(orgMrn, deviceMrn, serialNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a page of device identities of the specified organization
     * @param {string} orgMrn 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public async getOrganizationDevices(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageDevice>> {
        return DeviceControllerApiFp(this.configuration).getOrganizationDevices(orgMrn, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a page of device identities of the specified organization
     * @param {string} orgMrn 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public async getOrganizationDevices1(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageDevice>> {
        return DeviceControllerApiFp(this.configuration).getOrganizationDevices1(orgMrn, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new device certificate using CSR
     * @param {string} body A PEM encoded PKCS#10 CSR
     * @param {string} orgMrn 
     * @param {string} deviceMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public async newDeviceCertFromCsr(body: string, orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DeviceControllerApiFp(this.configuration).newDeviceCertFromCsr(body, orgMrn, deviceMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new device certificate using CSR
     * @param {string} body A PEM encoded PKCS#10 CSR
     * @param {string} orgMrn 
     * @param {string} deviceMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public async newDeviceCertFromCsr1(body: string, orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DeviceControllerApiFp(this.configuration).newDeviceCertFromCsr1(body, orgMrn, deviceMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Revoke the device certificate with the given serial number
     * @param {CertificateRevocation} body 
     * @param {string} orgMrn 
     * @param {string} deviceMrn 
     * @param {number} certId The serial number of the certificate given in decimal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public async revokeDeviceCert(body: CertificateRevocation, orgMrn: string, deviceMrn: string, certId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DeviceControllerApiFp(this.configuration).revokeDeviceCert(body, orgMrn, deviceMrn, certId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Revoke the device certificate with the given serial number
     * @param {CertificateRevocation} body 
     * @param {string} orgMrn 
     * @param {string} deviceMrn 
     * @param {number} certId The serial number of the certificate given in decimal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public async revokeDeviceCert1(body: CertificateRevocation, orgMrn: string, deviceMrn: string, certId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DeviceControllerApiFp(this.configuration).revokeDeviceCert1(body, orgMrn, deviceMrn, certId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing device identity
     * @param {Device} body 
     * @param {string} orgMrn 
     * @param {string} deviceMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public async updateDevice(body: Device, orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DeviceControllerApiFp(this.configuration).updateDevice(body, orgMrn, deviceMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing device identity
     * @param {Device} body 
     * @param {string} orgMrn 
     * @param {string} deviceMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceControllerApi
     */
    public async updateDevice1(body: Device, orgMrn: string, deviceMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return DeviceControllerApiFp(this.configuration).updateDevice1(body, orgMrn, deviceMrn, options).then((request) => request(this.axios, this.basePath));
    }
}
