/* tslint:disable */
/* eslint-disable */
/**
 * Maritime Connectivity Platform Identity Registry API
 * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\"https://api.aivn.kr/v3/api-docs/mcp-idreg-oidc\">here</a> and <a href=\"https://api-x509.aivn.kr/v3/api-docs/mcp-idreg-x509\">here</a>.
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@maritimeconnectivity.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Role } from '../models';
/**
 * RoleControllerApi - axios parameter creator
 * @export
 */
export const RoleControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new role mapping
         * @param {Role} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole: async (body: Role, orgMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createRole.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling createRole.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/role`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new role mapping
         * @param {Role} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRole1: async (body: Role, orgMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createRole1.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling createRole1.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/role`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific role mapping
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole: async (orgMrn: string, roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling deleteRole.');
            }
            // verify required parameter 'roleId' is not null or undefined
            if (roleId === null || roleId === undefined) {
                throw new RequiredError('roleId','Required parameter roleId was null or undefined when calling deleteRole.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/role/{roleId}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific role mapping
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRole1: async (orgMrn: string, roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling deleteRole1.');
            }
            // verify required parameter 'roleId' is not null or undefined
            if (roleId === null || roleId === undefined) {
                throw new RequiredError('roleId','Required parameter roleId was null or undefined when calling deleteRole1.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/role/{roleId}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of available roles
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableRoles: async (orgMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getAvailableRoles.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/role/available-roles`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of available roles
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableRoles1: async (orgMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getAvailableRoles1.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/role/available-roles`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of roles of the requesting user
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyRole: async (orgMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getMyRole.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/role/myroles`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of roles of the requesting user
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyRole1: async (orgMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getMyRole1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/role/myroles`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific role mapping
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole: async (orgMrn: string, roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getRole.');
            }
            // verify required parameter 'roleId' is not null or undefined
            if (roleId === null || roleId === undefined) {
                throw new RequiredError('roleId','Required parameter roleId was null or undefined when calling getRole.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/role/{roleId}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific role mapping
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRole1: async (orgMrn: string, roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getRole1.');
            }
            // verify required parameter 'roleId' is not null or undefined
            if (roleId === null || roleId === undefined) {
                throw new RequiredError('roleId','Required parameter roleId was null or undefined when calling getRole1.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/role/{roleId}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of role mappings for the specified organization
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles: async (orgMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getRoles.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/roles`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the list of role mappings for the specified organization
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoles1: async (orgMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getRoles1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/roles`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific role mapping
         * @param {Role} body 
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole: async (body: Role, orgMrn: string, roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateRole.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling updateRole.');
            }
            // verify required parameter 'roleId' is not null or undefined
            if (roleId === null || roleId === undefined) {
                throw new RequiredError('roleId','Required parameter roleId was null or undefined when calling updateRole.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/role/{roleId}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific role mapping
         * @param {Role} body 
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRole1: async (body: Role, orgMrn: string, roleId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateRole1.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling updateRole1.');
            }
            // verify required parameter 'roleId' is not null or undefined
            if (roleId === null || roleId === undefined) {
                throw new RequiredError('roleId','Required parameter roleId was null or undefined when calling updateRole1.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/role/{roleId}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"roleId"}}`, encodeURIComponent(String(roleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoleControllerApi - functional programming interface
 * @export
 */
export const RoleControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new role mapping
         * @param {Role} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(body: Role, orgMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Role>>> {
            const localVarAxiosArgs = await RoleControllerApiAxiosParamCreator(configuration).createRole(body, orgMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new role mapping
         * @param {Role} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole1(body: Role, orgMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Role>>> {
            const localVarAxiosArgs = await RoleControllerApiAxiosParamCreator(configuration).createRole1(body, orgMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a specific role mapping
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(orgMrn: string, roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await RoleControllerApiAxiosParamCreator(configuration).deleteRole(orgMrn, roleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a specific role mapping
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole1(orgMrn: string, roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await RoleControllerApiAxiosParamCreator(configuration).deleteRole1(orgMrn, roleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the list of available roles
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableRoles(orgMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await RoleControllerApiAxiosParamCreator(configuration).getAvailableRoles(orgMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the list of available roles
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableRoles1(orgMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await RoleControllerApiAxiosParamCreator(configuration).getAvailableRoles1(orgMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the list of roles of the requesting user
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyRole(orgMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await RoleControllerApiAxiosParamCreator(configuration).getMyRole(orgMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the list of roles of the requesting user
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyRole1(orgMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await RoleControllerApiAxiosParamCreator(configuration).getMyRole1(orgMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a specific role mapping
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRole(orgMrn: string, roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Role>>> {
            const localVarAxiosArgs = await RoleControllerApiAxiosParamCreator(configuration).getRole(orgMrn, roleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a specific role mapping
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRole1(orgMrn: string, roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Role>>> {
            const localVarAxiosArgs = await RoleControllerApiAxiosParamCreator(configuration).getRole1(orgMrn, roleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the list of role mappings for the specified organization
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoles(orgMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Role>>>> {
            const localVarAxiosArgs = await RoleControllerApiAxiosParamCreator(configuration).getRoles(orgMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the list of role mappings for the specified organization
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoles1(orgMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<Role>>>> {
            const localVarAxiosArgs = await RoleControllerApiAxiosParamCreator(configuration).getRoles1(orgMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a specific role mapping
         * @param {Role} body 
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole(body: Role, orgMrn: string, roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await RoleControllerApiAxiosParamCreator(configuration).updateRole(body, orgMrn, roleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a specific role mapping
         * @param {Role} body 
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole1(body: Role, orgMrn: string, roleId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await RoleControllerApiAxiosParamCreator(configuration).updateRole1(body, orgMrn, roleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RoleControllerApi - factory interface
 * @export
 */
export const RoleControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new role mapping
         * @param {Role} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole(body: Role, orgMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Role>> {
            return RoleControllerApiFp(configuration).createRole(body, orgMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new role mapping
         * @param {Role} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRole1(body: Role, orgMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Role>> {
            return RoleControllerApiFp(configuration).createRole1(body, orgMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific role mapping
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole(orgMrn: string, roleId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return RoleControllerApiFp(configuration).deleteRole(orgMrn, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific role mapping
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRole1(orgMrn: string, roleId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return RoleControllerApiFp(configuration).deleteRole1(orgMrn, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of available roles
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableRoles(orgMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return RoleControllerApiFp(configuration).getAvailableRoles(orgMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of available roles
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableRoles1(orgMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return RoleControllerApiFp(configuration).getAvailableRoles1(orgMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of roles of the requesting user
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyRole(orgMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return RoleControllerApiFp(configuration).getMyRole(orgMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of roles of the requesting user
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyRole1(orgMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return RoleControllerApiFp(configuration).getMyRole1(orgMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific role mapping
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRole(orgMrn: string, roleId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Role>> {
            return RoleControllerApiFp(configuration).getRole(orgMrn, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific role mapping
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRole1(orgMrn: string, roleId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Role>> {
            return RoleControllerApiFp(configuration).getRole1(orgMrn, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of role mappings for the specified organization
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoles(orgMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Role>>> {
            return RoleControllerApiFp(configuration).getRoles(orgMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the list of role mappings for the specified organization
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoles1(orgMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<Role>>> {
            return RoleControllerApiFp(configuration).getRoles1(orgMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific role mapping
         * @param {Role} body 
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole(body: Role, orgMrn: string, roleId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return RoleControllerApiFp(configuration).updateRole(body, orgMrn, roleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific role mapping
         * @param {Role} body 
         * @param {string} orgMrn 
         * @param {number} roleId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRole1(body: Role, orgMrn: string, roleId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return RoleControllerApiFp(configuration).updateRole1(body, orgMrn, roleId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoleControllerApi - object-oriented interface
 * @export
 * @class RoleControllerApi
 * @extends {BaseAPI}
 */
export class RoleControllerApi extends BaseAPI {
    /**
     * Create a new role mapping
     * @param {Role} body 
     * @param {string} orgMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public async createRole(body: Role, orgMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Role>> {
        return RoleControllerApiFp(this.configuration).createRole(body, orgMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new role mapping
     * @param {Role} body 
     * @param {string} orgMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public async createRole1(body: Role, orgMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Role>> {
        return RoleControllerApiFp(this.configuration).createRole1(body, orgMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a specific role mapping
     * @param {string} orgMrn 
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public async deleteRole(orgMrn: string, roleId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return RoleControllerApiFp(this.configuration).deleteRole(orgMrn, roleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a specific role mapping
     * @param {string} orgMrn 
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public async deleteRole1(orgMrn: string, roleId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return RoleControllerApiFp(this.configuration).deleteRole1(orgMrn, roleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the list of available roles
     * @param {string} orgMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public async getAvailableRoles(orgMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return RoleControllerApiFp(this.configuration).getAvailableRoles(orgMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the list of available roles
     * @param {string} orgMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public async getAvailableRoles1(orgMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return RoleControllerApiFp(this.configuration).getAvailableRoles1(orgMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the list of roles of the requesting user
     * @param {string} orgMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public async getMyRole(orgMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return RoleControllerApiFp(this.configuration).getMyRole(orgMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the list of roles of the requesting user
     * @param {string} orgMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public async getMyRole1(orgMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return RoleControllerApiFp(this.configuration).getMyRole1(orgMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a specific role mapping
     * @param {string} orgMrn 
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public async getRole(orgMrn: string, roleId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Role>> {
        return RoleControllerApiFp(this.configuration).getRole(orgMrn, roleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a specific role mapping
     * @param {string} orgMrn 
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public async getRole1(orgMrn: string, roleId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Role>> {
        return RoleControllerApiFp(this.configuration).getRole1(orgMrn, roleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the list of role mappings for the specified organization
     * @param {string} orgMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public async getRoles(orgMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Role>>> {
        return RoleControllerApiFp(this.configuration).getRoles(orgMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the list of role mappings for the specified organization
     * @param {string} orgMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public async getRoles1(orgMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<Role>>> {
        return RoleControllerApiFp(this.configuration).getRoles1(orgMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a specific role mapping
     * @param {Role} body 
     * @param {string} orgMrn 
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public async updateRole(body: Role, orgMrn: string, roleId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return RoleControllerApiFp(this.configuration).updateRole(body, orgMrn, roleId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a specific role mapping
     * @param {Role} body 
     * @param {string} orgMrn 
     * @param {number} roleId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoleControllerApi
     */
    public async updateRole1(body: Role, orgMrn: string, roleId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return RoleControllerApiFp(this.configuration).updateRole1(body, orgMrn, roleId, options).then((request) => request(this.axios, this.basePath));
    }
}
