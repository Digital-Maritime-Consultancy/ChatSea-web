/* tslint:disable */
/* eslint-disable */
/**
 * Maritime Connectivity Platform Identity Registry API
 * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\"https://api.aivn.kr/v3/api-docs/mcp-idreg-oidc\">here</a> and <a href=\"https://api-x509.aivn.kr/v3/api-docs/mcp-idreg-x509\">here</a>.
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@maritimeconnectivity.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Certificate } from '../models';
import { CertificateRevocation } from '../models';
import { PageService } from '../models';
import { Pageable } from '../models';
import { Service } from '../models';
/**
 * ServiceControllerApi - axios parameter creator
 * @export
 */
export const ServiceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new service identity
         * @param {Service} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createService: async (body: Service, orgMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createService.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling createService.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/service`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new service identity
         * @param {Service} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createService1: async (body: Service, orgMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createService1.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling createService1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/service`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific service identity
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteService: async (orgMrn: string, serviceMrn: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling deleteService.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling deleteService.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling deleteService.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/service/{serviceMrn}/{version}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific service identity
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteService1: async (orgMrn: string, serviceMrn: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling deleteService1.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling deleteService1.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling deleteService1.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/service/{serviceMrn}/{version}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a page of service identities of the specified organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationServices: async (orgMrn: string, page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getOrganizationServices.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/services`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a page of service identities of the specified organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationServices1: async (orgMrn: string, page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getOrganizationServices1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/services`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a page of service identities with a given MRN
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getService: async (orgMrn: string, serviceMrn: string, pageable: Pageable, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getService.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling getService.');
            }
            // verify required parameter 'pageable' is not null or undefined
            if (pageable === null || pageable === undefined) {
                throw new RequiredError('pageable','Required parameter pageable was null or undefined when calling getService.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/service/{serviceMrn}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                localVarQueryParameter['pageable'] = pageable;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a page of service identities with a given MRN
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getService1: async (orgMrn: string, serviceMrn: string, pageable: Pageable, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getService1.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling getService1.');
            }
            // verify required parameter 'pageable' is not null or undefined
            if (pageable === null || pageable === undefined) {
                throw new RequiredError('pageable','Required parameter pageable was null or undefined when calling getService1.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/service/{serviceMrn}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageable !== undefined) {
                localVarQueryParameter['pageable'] = pageable;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the service identity certificate with the given serial number
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {number} serialNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceCert: async (orgMrn: string, serviceMrn: string, version: string, serialNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getServiceCert.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling getServiceCert.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getServiceCert.');
            }
            // verify required parameter 'serialNumber' is not null or undefined
            if (serialNumber === null || serialNumber === undefined) {
                throw new RequiredError('serialNumber','Required parameter serialNumber was null or undefined when calling getServiceCert.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/service/{serviceMrn}/{version}/certificate/{serialNumber}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"serialNumber"}}`, encodeURIComponent(String(serialNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the service identity certificate with the given serial number
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {number} serialNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceCert1: async (orgMrn: string, serviceMrn: string, version: string, serialNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getServiceCert1.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling getServiceCert1.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getServiceCert1.');
            }
            // verify required parameter 'serialNumber' is not null or undefined
            if (serialNumber === null || serialNumber === undefined) {
                throw new RequiredError('serialNumber','Required parameter serialNumber was null or undefined when calling getServiceCert1.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/service/{serviceMrn}/{version}/certificate/{serialNumber}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"serialNumber"}}`, encodeURIComponent(String(serialNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the Keycloak JBoss XML configuration for the specified service if it exists
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJbossXml: async (orgMrn: string, serviceMrn: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getServiceJbossXml.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling getServiceJbossXml.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getServiceJbossXml.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/service/{serviceMrn}/{version}/jbossxml`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the Keycloak JBoss XML configuration for the specified service if it exists
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJbossXml1: async (orgMrn: string, serviceMrn: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getServiceJbossXml1.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling getServiceJbossXml1.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getServiceJbossXml1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/service/{serviceMrn}/{version}/jbossxml`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the Keycloak JSON configuration for the specified service if it exists
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceKeycloakJson: async (orgMrn: string, serviceMrn: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getServiceKeycloakJson.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling getServiceKeycloakJson.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getServiceKeycloakJson.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/service/{serviceMrn}/{version}/keycloakjson`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the Keycloak JSON configuration for the specified service if it exists
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceKeycloakJson1: async (orgMrn: string, serviceMrn: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getServiceKeycloakJson1.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling getServiceKeycloakJson1.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getServiceKeycloakJson1.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/service/{serviceMrn}/{version}/keycloakjson`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the service identity with the given MRN and version
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceVersion: async (orgMrn: string, serviceMrn: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getServiceVersion.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling getServiceVersion.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getServiceVersion.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/service/{serviceMrn}/{version}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the service identity with the given MRN and version
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceVersion1: async (orgMrn: string, serviceMrn: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getServiceVersion1.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling getServiceVersion1.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling getServiceVersion1.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/service/{serviceMrn}/{version}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new service identity certificate using CSR
         * @param {string} body A PEM encoded PKCS#10 CSR
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newServiceCertFromCsr: async (body: string, orgMrn: string, serviceMrn: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling newServiceCertFromCsr.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling newServiceCertFromCsr.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling newServiceCertFromCsr.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling newServiceCertFromCsr.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/service/{serviceMrn}/{version}/certificate/issue-new/csr`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/x-pem-file';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new service identity certificate using CSR
         * @param {string} body A PEM encoded PKCS#10 CSR
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newServiceCertFromCsr1: async (body: string, orgMrn: string, serviceMrn: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling newServiceCertFromCsr1.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling newServiceCertFromCsr1.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling newServiceCertFromCsr1.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling newServiceCertFromCsr1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/service/{serviceMrn}/{version}/certificate/issue-new/csr`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/x-pem-file';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke the service identity certificate with the given serial number
         * @param {CertificateRevocation} body 
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {number} certId The serial number of the certificate given in decimal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeServiceCert: async (body: CertificateRevocation, orgMrn: string, serviceMrn: string, version: string, certId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling revokeServiceCert.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling revokeServiceCert.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling revokeServiceCert.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling revokeServiceCert.');
            }
            // verify required parameter 'certId' is not null or undefined
            if (certId === null || certId === undefined) {
                throw new RequiredError('certId','Required parameter certId was null or undefined when calling revokeServiceCert.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/service/{serviceMrn}/{version}/certificate/{certId}/revoke`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"certId"}}`, encodeURIComponent(String(certId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Revoke the service identity certificate with the given serial number
         * @param {CertificateRevocation} body 
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {number} certId The serial number of the certificate given in decimal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revokeServiceCert1: async (body: CertificateRevocation, orgMrn: string, serviceMrn: string, version: string, certId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling revokeServiceCert1.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling revokeServiceCert1.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling revokeServiceCert1.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling revokeServiceCert1.');
            }
            // verify required parameter 'certId' is not null or undefined
            if (certId === null || certId === undefined) {
                throw new RequiredError('certId','Required parameter certId was null or undefined when calling revokeServiceCert1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/service/{serviceMrn}/{version}/certificate/{certId}/revoke`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)))
                .replace(`{${"certId"}}`, encodeURIComponent(String(certId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific service identity
         * @param {Service} body 
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateService: async (body: Service, orgMrn: string, serviceMrn: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateService.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling updateService.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling updateService.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling updateService.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/service/{serviceMrn}/{version}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific service identity
         * @param {Service} body 
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateService1: async (body: Service, orgMrn: string, serviceMrn: string, version: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateService1.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling updateService1.');
            }
            // verify required parameter 'serviceMrn' is not null or undefined
            if (serviceMrn === null || serviceMrn === undefined) {
                throw new RequiredError('serviceMrn','Required parameter serviceMrn was null or undefined when calling updateService1.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling updateService1.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/service/{serviceMrn}/{version}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"serviceMrn"}}`, encodeURIComponent(String(serviceMrn)))
                .replace(`{${"version"}}`, encodeURIComponent(String(version)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceControllerApi - functional programming interface
 * @export
 */
export const ServiceControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new service identity
         * @param {Service} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createService(body: Service, orgMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Service>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).createService(body, orgMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new service identity
         * @param {Service} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createService1(body: Service, orgMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Service>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).createService1(body, orgMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a specific service identity
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteService(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).deleteService(orgMrn, serviceMrn, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a specific service identity
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteService1(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).deleteService1(orgMrn, serviceMrn, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a page of service identities of the specified organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationServices(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageService>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).getOrganizationServices(orgMrn, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a page of service identities of the specified organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationServices1(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageService>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).getOrganizationServices1(orgMrn, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a page of service identities with a given MRN
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getService(orgMrn: string, serviceMrn: string, pageable: Pageable, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageService>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).getService(orgMrn, serviceMrn, pageable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a page of service identities with a given MRN
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getService1(orgMrn: string, serviceMrn: string, pageable: Pageable, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageService>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).getService1(orgMrn, serviceMrn, pageable, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the service identity certificate with the given serial number
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {number} serialNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceCert(orgMrn: string, serviceMrn: string, version: string, serialNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Certificate>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).getServiceCert(orgMrn, serviceMrn, version, serialNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the service identity certificate with the given serial number
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {number} serialNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceCert1(orgMrn: string, serviceMrn: string, version: string, serialNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Certificate>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).getServiceCert1(orgMrn, serviceMrn, version, serialNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the Keycloak JBoss XML configuration for the specified service if it exists
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceJbossXml(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).getServiceJbossXml(orgMrn, serviceMrn, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the Keycloak JBoss XML configuration for the specified service if it exists
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceJbossXml1(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).getServiceJbossXml1(orgMrn, serviceMrn, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the Keycloak JSON configuration for the specified service if it exists
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceKeycloakJson(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).getServiceKeycloakJson(orgMrn, serviceMrn, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the Keycloak JSON configuration for the specified service if it exists
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceKeycloakJson1(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).getServiceKeycloakJson1(orgMrn, serviceMrn, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the service identity with the given MRN and version
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceVersion(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Service>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).getServiceVersion(orgMrn, serviceMrn, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the service identity with the given MRN and version
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceVersion1(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Service>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).getServiceVersion1(orgMrn, serviceMrn, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new service identity certificate using CSR
         * @param {string} body A PEM encoded PKCS#10 CSR
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newServiceCertFromCsr(body: string, orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).newServiceCertFromCsr(body, orgMrn, serviceMrn, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new service identity certificate using CSR
         * @param {string} body A PEM encoded PKCS#10 CSR
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newServiceCertFromCsr1(body: string, orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).newServiceCertFromCsr1(body, orgMrn, serviceMrn, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Revoke the service identity certificate with the given serial number
         * @param {CertificateRevocation} body 
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {number} certId The serial number of the certificate given in decimal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeServiceCert(body: CertificateRevocation, orgMrn: string, serviceMrn: string, version: string, certId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).revokeServiceCert(body, orgMrn, serviceMrn, version, certId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Revoke the service identity certificate with the given serial number
         * @param {CertificateRevocation} body 
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {number} certId The serial number of the certificate given in decimal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeServiceCert1(body: CertificateRevocation, orgMrn: string, serviceMrn: string, version: string, certId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).revokeServiceCert1(body, orgMrn, serviceMrn, version, certId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a specific service identity
         * @param {Service} body 
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateService(body: Service, orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).updateService(body, orgMrn, serviceMrn, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a specific service identity
         * @param {Service} body 
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateService1(body: Service, orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await ServiceControllerApiAxiosParamCreator(configuration).updateService1(body, orgMrn, serviceMrn, version, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ServiceControllerApi - factory interface
 * @export
 */
export const ServiceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new service identity
         * @param {Service} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createService(body: Service, orgMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Service>> {
            return ServiceControllerApiFp(configuration).createService(body, orgMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new service identity
         * @param {Service} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createService1(body: Service, orgMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Service>> {
            return ServiceControllerApiFp(configuration).createService1(body, orgMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific service identity
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteService(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return ServiceControllerApiFp(configuration).deleteService(orgMrn, serviceMrn, version, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific service identity
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteService1(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return ServiceControllerApiFp(configuration).deleteService1(orgMrn, serviceMrn, version, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a page of service identities of the specified organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationServices(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageService>> {
            return ServiceControllerApiFp(configuration).getOrganizationServices(orgMrn, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a page of service identities of the specified organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationServices1(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageService>> {
            return ServiceControllerApiFp(configuration).getOrganizationServices1(orgMrn, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a page of service identities with a given MRN
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getService(orgMrn: string, serviceMrn: string, pageable: Pageable, options?: AxiosRequestConfig): Promise<AxiosResponse<PageService>> {
            return ServiceControllerApiFp(configuration).getService(orgMrn, serviceMrn, pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a page of service identities with a given MRN
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {Pageable} pageable 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getService1(orgMrn: string, serviceMrn: string, pageable: Pageable, options?: AxiosRequestConfig): Promise<AxiosResponse<PageService>> {
            return ServiceControllerApiFp(configuration).getService1(orgMrn, serviceMrn, pageable, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the service identity certificate with the given serial number
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {number} serialNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceCert(orgMrn: string, serviceMrn: string, version: string, serialNumber: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Certificate>> {
            return ServiceControllerApiFp(configuration).getServiceCert(orgMrn, serviceMrn, version, serialNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the service identity certificate with the given serial number
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {number} serialNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceCert1(orgMrn: string, serviceMrn: string, version: string, serialNumber: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Certificate>> {
            return ServiceControllerApiFp(configuration).getServiceCert1(orgMrn, serviceMrn, version, serialNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the Keycloak JBoss XML configuration for the specified service if it exists
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceJbossXml(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ServiceControllerApiFp(configuration).getServiceJbossXml(orgMrn, serviceMrn, version, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the Keycloak JBoss XML configuration for the specified service if it exists
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceJbossXml1(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ServiceControllerApiFp(configuration).getServiceJbossXml1(orgMrn, serviceMrn, version, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the Keycloak JSON configuration for the specified service if it exists
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceKeycloakJson(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ServiceControllerApiFp(configuration).getServiceKeycloakJson(orgMrn, serviceMrn, version, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the Keycloak JSON configuration for the specified service if it exists
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceKeycloakJson1(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ServiceControllerApiFp(configuration).getServiceKeycloakJson1(orgMrn, serviceMrn, version, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the service identity with the given MRN and version
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceVersion(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Service>> {
            return ServiceControllerApiFp(configuration).getServiceVersion(orgMrn, serviceMrn, version, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the service identity with the given MRN and version
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceVersion1(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Service>> {
            return ServiceControllerApiFp(configuration).getServiceVersion1(orgMrn, serviceMrn, version, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new service identity certificate using CSR
         * @param {string} body A PEM encoded PKCS#10 CSR
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newServiceCertFromCsr(body: string, orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ServiceControllerApiFp(configuration).newServiceCertFromCsr(body, orgMrn, serviceMrn, version, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new service identity certificate using CSR
         * @param {string} body A PEM encoded PKCS#10 CSR
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newServiceCertFromCsr1(body: string, orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ServiceControllerApiFp(configuration).newServiceCertFromCsr1(body, orgMrn, serviceMrn, version, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke the service identity certificate with the given serial number
         * @param {CertificateRevocation} body 
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {number} certId The serial number of the certificate given in decimal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeServiceCert(body: CertificateRevocation, orgMrn: string, serviceMrn: string, version: string, certId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return ServiceControllerApiFp(configuration).revokeServiceCert(body, orgMrn, serviceMrn, version, certId, options).then((request) => request(axios, basePath));
        },
        /**
         * Revoke the service identity certificate with the given serial number
         * @param {CertificateRevocation} body 
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {number} certId The serial number of the certificate given in decimal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revokeServiceCert1(body: CertificateRevocation, orgMrn: string, serviceMrn: string, version: string, certId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return ServiceControllerApiFp(configuration).revokeServiceCert1(body, orgMrn, serviceMrn, version, certId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific service identity
         * @param {Service} body 
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateService(body: Service, orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return ServiceControllerApiFp(configuration).updateService(body, orgMrn, serviceMrn, version, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific service identity
         * @param {Service} body 
         * @param {string} orgMrn 
         * @param {string} serviceMrn 
         * @param {string} version 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateService1(body: Service, orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return ServiceControllerApiFp(configuration).updateService1(body, orgMrn, serviceMrn, version, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceControllerApi - object-oriented interface
 * @export
 * @class ServiceControllerApi
 * @extends {BaseAPI}
 */
export class ServiceControllerApi extends BaseAPI {
    /**
     * Create a new service identity
     * @param {Service} body 
     * @param {string} orgMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async createService(body: Service, orgMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Service>> {
        return ServiceControllerApiFp(this.configuration).createService(body, orgMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new service identity
     * @param {Service} body 
     * @param {string} orgMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async createService1(body: Service, orgMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Service>> {
        return ServiceControllerApiFp(this.configuration).createService1(body, orgMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a specific service identity
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async deleteService(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return ServiceControllerApiFp(this.configuration).deleteService(orgMrn, serviceMrn, version, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a specific service identity
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async deleteService1(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return ServiceControllerApiFp(this.configuration).deleteService1(orgMrn, serviceMrn, version, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a page of service identities of the specified organization
     * @param {string} orgMrn 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async getOrganizationServices(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageService>> {
        return ServiceControllerApiFp(this.configuration).getOrganizationServices(orgMrn, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a page of service identities of the specified organization
     * @param {string} orgMrn 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async getOrganizationServices1(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageService>> {
        return ServiceControllerApiFp(this.configuration).getOrganizationServices1(orgMrn, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a page of service identities with a given MRN
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async getService(orgMrn: string, serviceMrn: string, pageable: Pageable, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageService>> {
        return ServiceControllerApiFp(this.configuration).getService(orgMrn, serviceMrn, pageable, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a page of service identities with a given MRN
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {Pageable} pageable 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async getService1(orgMrn: string, serviceMrn: string, pageable: Pageable, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageService>> {
        return ServiceControllerApiFp(this.configuration).getService1(orgMrn, serviceMrn, pageable, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the service identity certificate with the given serial number
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {string} version 
     * @param {number} serialNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async getServiceCert(orgMrn: string, serviceMrn: string, version: string, serialNumber: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Certificate>> {
        return ServiceControllerApiFp(this.configuration).getServiceCert(orgMrn, serviceMrn, version, serialNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the service identity certificate with the given serial number
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {string} version 
     * @param {number} serialNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async getServiceCert1(orgMrn: string, serviceMrn: string, version: string, serialNumber: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Certificate>> {
        return ServiceControllerApiFp(this.configuration).getServiceCert1(orgMrn, serviceMrn, version, serialNumber, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the Keycloak JBoss XML configuration for the specified service if it exists
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async getServiceJbossXml(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ServiceControllerApiFp(this.configuration).getServiceJbossXml(orgMrn, serviceMrn, version, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the Keycloak JBoss XML configuration for the specified service if it exists
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async getServiceJbossXml1(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ServiceControllerApiFp(this.configuration).getServiceJbossXml1(orgMrn, serviceMrn, version, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the Keycloak JSON configuration for the specified service if it exists
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async getServiceKeycloakJson(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ServiceControllerApiFp(this.configuration).getServiceKeycloakJson(orgMrn, serviceMrn, version, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the Keycloak JSON configuration for the specified service if it exists
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async getServiceKeycloakJson1(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ServiceControllerApiFp(this.configuration).getServiceKeycloakJson1(orgMrn, serviceMrn, version, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the service identity with the given MRN and version
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async getServiceVersion(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Service>> {
        return ServiceControllerApiFp(this.configuration).getServiceVersion(orgMrn, serviceMrn, version, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the service identity with the given MRN and version
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async getServiceVersion1(orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Service>> {
        return ServiceControllerApiFp(this.configuration).getServiceVersion1(orgMrn, serviceMrn, version, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new service identity certificate using CSR
     * @param {string} body A PEM encoded PKCS#10 CSR
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async newServiceCertFromCsr(body: string, orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ServiceControllerApiFp(this.configuration).newServiceCertFromCsr(body, orgMrn, serviceMrn, version, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new service identity certificate using CSR
     * @param {string} body A PEM encoded PKCS#10 CSR
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async newServiceCertFromCsr1(body: string, orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ServiceControllerApiFp(this.configuration).newServiceCertFromCsr1(body, orgMrn, serviceMrn, version, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Revoke the service identity certificate with the given serial number
     * @param {CertificateRevocation} body 
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {string} version 
     * @param {number} certId The serial number of the certificate given in decimal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async revokeServiceCert(body: CertificateRevocation, orgMrn: string, serviceMrn: string, version: string, certId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return ServiceControllerApiFp(this.configuration).revokeServiceCert(body, orgMrn, serviceMrn, version, certId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Revoke the service identity certificate with the given serial number
     * @param {CertificateRevocation} body 
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {string} version 
     * @param {number} certId The serial number of the certificate given in decimal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async revokeServiceCert1(body: CertificateRevocation, orgMrn: string, serviceMrn: string, version: string, certId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return ServiceControllerApiFp(this.configuration).revokeServiceCert1(body, orgMrn, serviceMrn, version, certId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a specific service identity
     * @param {Service} body 
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async updateService(body: Service, orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return ServiceControllerApiFp(this.configuration).updateService(body, orgMrn, serviceMrn, version, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a specific service identity
     * @param {Service} body 
     * @param {string} orgMrn 
     * @param {string} serviceMrn 
     * @param {string} version 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceControllerApi
     */
    public async updateService1(body: Service, orgMrn: string, serviceMrn: string, version: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return ServiceControllerApiFp(this.configuration).updateService1(body, orgMrn, serviceMrn, version, options).then((request) => request(this.axios, this.basePath));
    }
}
