/* tslint:disable */
/* eslint-disable */
/**
 * Maritime Connectivity Platform Identity Registry API
 * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\"https://api.aivn.kr/v3/api-docs/mcp-idreg-oidc\">here</a> and <a href=\"https://api-x509.aivn.kr/v3/api-docs/mcp-idreg-x509\">here</a>.
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@maritimeconnectivity.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Agent } from '../models';
import { PageAgent } from '../models';
/**
 * AgentControllerApi - axios parameter creator
 * @export
 */
export const AgentControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new agent
         * @param {Agent} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent: async (body: Agent, orgMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAgent.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling createAgent.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/agent`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new agent
         * @param {Agent} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAgent1: async (body: Agent, orgMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createAgent1.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling createAgent1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/agent`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a given agent
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent: async (orgMrn: string, agentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling deleteAgent.');
            }
            // verify required parameter 'agentId' is not null or undefined
            if (agentId === null || agentId === undefined) {
                throw new RequiredError('agentId','Required parameter agentId was null or undefined when calling deleteAgent.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/agent/{agentId}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"agentId"}}`, encodeURIComponent(String(agentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a given agent
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAgent1: async (orgMrn: string, agentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling deleteAgent1.');
            }
            // verify required parameter 'agentId' is not null or undefined
            if (agentId === null || agentId === undefined) {
                throw new RequiredError('agentId','Required parameter agentId was null or undefined when calling deleteAgent1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/agent/{agentId}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"agentId"}}`, encodeURIComponent(String(agentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of all organization that can be acted on behalf of
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActingOnBehalfOf: async (orgMrn: string, page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getActingOnBehalfOf.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/acting-on-behalf-of`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the list of all organization that can be acted on behalf of
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActingOnBehalfOf1: async (orgMrn: string, page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getActingOnBehalfOf1.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/acting-on-behalf-of`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific agent
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgent: async (orgMrn: string, agentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getAgent.');
            }
            // verify required parameter 'agentId' is not null or undefined
            if (agentId === null || agentId === undefined) {
                throw new RequiredError('agentId','Required parameter agentId was null or undefined when calling getAgent.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/agent/{agentId}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"agentId"}}`, encodeURIComponent(String(agentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific agent
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgent1: async (orgMrn: string, agentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getAgent1.');
            }
            // verify required parameter 'agentId' is not null or undefined
            if (agentId === null || agentId === undefined) {
                throw new RequiredError('agentId','Required parameter agentId was null or undefined when calling getAgent1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/agent/{agentId}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"agentId"}}`, encodeURIComponent(String(agentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a page of agents for the given organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgents: async (orgMrn: string, page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getAgents.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/agents`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a page of agents for the given organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAgents1: async (orgMrn: string, page?: number, size?: number, sort?: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getAgents1.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/agents`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing agent
         * @param {Agent} body 
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent: async (body: Agent, orgMrn: string, agentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAgent.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling updateAgent.');
            }
            // verify required parameter 'agentId' is not null or undefined
            if (agentId === null || agentId === undefined) {
                throw new RequiredError('agentId','Required parameter agentId was null or undefined when calling updateAgent.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/agent/{agentId}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"agentId"}}`, encodeURIComponent(String(agentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing agent
         * @param {Agent} body 
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAgent1: async (body: Agent, orgMrn: string, agentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateAgent1.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling updateAgent1.');
            }
            // verify required parameter 'agentId' is not null or undefined
            if (agentId === null || agentId === undefined) {
                throw new RequiredError('agentId','Required parameter agentId was null or undefined when calling updateAgent1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/agent/{agentId}`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"agentId"}}`, encodeURIComponent(String(agentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AgentControllerApi - functional programming interface
 * @export
 */
export const AgentControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new agent
         * @param {Agent} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAgent(body: Agent, orgMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Agent>>> {
            const localVarAxiosArgs = await AgentControllerApiAxiosParamCreator(configuration).createAgent(body, orgMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new agent
         * @param {Agent} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAgent1(body: Agent, orgMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Agent>>> {
            const localVarAxiosArgs = await AgentControllerApiAxiosParamCreator(configuration).createAgent1(body, orgMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a given agent
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAgent(orgMrn: string, agentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await AgentControllerApiAxiosParamCreator(configuration).deleteAgent(orgMrn, agentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Deletes a given agent
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAgent1(orgMrn: string, agentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await AgentControllerApiAxiosParamCreator(configuration).deleteAgent1(orgMrn, agentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the list of all organization that can be acted on behalf of
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActingOnBehalfOf(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageAgent>>> {
            const localVarAxiosArgs = await AgentControllerApiAxiosParamCreator(configuration).getActingOnBehalfOf(orgMrn, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the list of all organization that can be acted on behalf of
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActingOnBehalfOf1(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageAgent>>> {
            const localVarAxiosArgs = await AgentControllerApiAxiosParamCreator(configuration).getActingOnBehalfOf1(orgMrn, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a specific agent
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgent(orgMrn: string, agentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Agent>>> {
            const localVarAxiosArgs = await AgentControllerApiAxiosParamCreator(configuration).getAgent(orgMrn, agentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a specific agent
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgent1(orgMrn: string, agentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Agent>>> {
            const localVarAxiosArgs = await AgentControllerApiAxiosParamCreator(configuration).getAgent1(orgMrn, agentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a page of agents for the given organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgents(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageAgent>>> {
            const localVarAxiosArgs = await AgentControllerApiAxiosParamCreator(configuration).getAgents(orgMrn, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a page of agents for the given organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgents1(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<PageAgent>>> {
            const localVarAxiosArgs = await AgentControllerApiAxiosParamCreator(configuration).getAgents1(orgMrn, page, size, sort, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an existing agent
         * @param {Agent} body 
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAgent(body: Agent, orgMrn: string, agentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Agent>>> {
            const localVarAxiosArgs = await AgentControllerApiAxiosParamCreator(configuration).updateAgent(body, orgMrn, agentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an existing agent
         * @param {Agent} body 
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAgent1(body: Agent, orgMrn: string, agentId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Agent>>> {
            const localVarAxiosArgs = await AgentControllerApiAxiosParamCreator(configuration).updateAgent1(body, orgMrn, agentId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AgentControllerApi - factory interface
 * @export
 */
export const AgentControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new agent
         * @param {Agent} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAgent(body: Agent, orgMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Agent>> {
            return AgentControllerApiFp(configuration).createAgent(body, orgMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new agent
         * @param {Agent} body 
         * @param {string} orgMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAgent1(body: Agent, orgMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Agent>> {
            return AgentControllerApiFp(configuration).createAgent1(body, orgMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a given agent
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAgent(orgMrn: string, agentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return AgentControllerApiFp(configuration).deleteAgent(orgMrn, agentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a given agent
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAgent1(orgMrn: string, agentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return AgentControllerApiFp(configuration).deleteAgent1(orgMrn, agentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of all organization that can be acted on behalf of
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActingOnBehalfOf(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageAgent>> {
            return AgentControllerApiFp(configuration).getActingOnBehalfOf(orgMrn, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the list of all organization that can be acted on behalf of
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActingOnBehalfOf1(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageAgent>> {
            return AgentControllerApiFp(configuration).getActingOnBehalfOf1(orgMrn, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific agent
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgent(orgMrn: string, agentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Agent>> {
            return AgentControllerApiFp(configuration).getAgent(orgMrn, agentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific agent
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgent1(orgMrn: string, agentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Agent>> {
            return AgentControllerApiFp(configuration).getAgent1(orgMrn, agentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a page of agents for the given organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgents(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageAgent>> {
            return AgentControllerApiFp(configuration).getAgents(orgMrn, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a page of agents for the given organization
         * @param {string} orgMrn 
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAgents1(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig): Promise<AxiosResponse<PageAgent>> {
            return AgentControllerApiFp(configuration).getAgents1(orgMrn, page, size, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing agent
         * @param {Agent} body 
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAgent(body: Agent, orgMrn: string, agentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Agent>> {
            return AgentControllerApiFp(configuration).updateAgent(body, orgMrn, agentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing agent
         * @param {Agent} body 
         * @param {string} orgMrn 
         * @param {number} agentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAgent1(body: Agent, orgMrn: string, agentId: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Agent>> {
            return AgentControllerApiFp(configuration).updateAgent1(body, orgMrn, agentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AgentControllerApi - object-oriented interface
 * @export
 * @class AgentControllerApi
 * @extends {BaseAPI}
 */
export class AgentControllerApi extends BaseAPI {
    /**
     * Creates a new agent
     * @param {Agent} body 
     * @param {string} orgMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentControllerApi
     */
    public async createAgent(body: Agent, orgMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Agent>> {
        return AgentControllerApiFp(this.configuration).createAgent(body, orgMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Creates a new agent
     * @param {Agent} body 
     * @param {string} orgMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentControllerApi
     */
    public async createAgent1(body: Agent, orgMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Agent>> {
        return AgentControllerApiFp(this.configuration).createAgent1(body, orgMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a given agent
     * @param {string} orgMrn 
     * @param {number} agentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentControllerApi
     */
    public async deleteAgent(orgMrn: string, agentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return AgentControllerApiFp(this.configuration).deleteAgent(orgMrn, agentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Deletes a given agent
     * @param {string} orgMrn 
     * @param {number} agentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentControllerApi
     */
    public async deleteAgent1(orgMrn: string, agentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return AgentControllerApiFp(this.configuration).deleteAgent1(orgMrn, agentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the list of all organization that can be acted on behalf of
     * @param {string} orgMrn 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentControllerApi
     */
    public async getActingOnBehalfOf(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageAgent>> {
        return AgentControllerApiFp(this.configuration).getActingOnBehalfOf(orgMrn, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns the list of all organization that can be acted on behalf of
     * @param {string} orgMrn 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentControllerApi
     */
    public async getActingOnBehalfOf1(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageAgent>> {
        return AgentControllerApiFp(this.configuration).getActingOnBehalfOf1(orgMrn, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a specific agent
     * @param {string} orgMrn 
     * @param {number} agentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentControllerApi
     */
    public async getAgent(orgMrn: string, agentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Agent>> {
        return AgentControllerApiFp(this.configuration).getAgent(orgMrn, agentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get a specific agent
     * @param {string} orgMrn 
     * @param {number} agentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentControllerApi
     */
    public async getAgent1(orgMrn: string, agentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Agent>> {
        return AgentControllerApiFp(this.configuration).getAgent1(orgMrn, agentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a page of agents for the given organization
     * @param {string} orgMrn 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentControllerApi
     */
    public async getAgents(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageAgent>> {
        return AgentControllerApiFp(this.configuration).getAgents(orgMrn, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a page of agents for the given organization
     * @param {string} orgMrn 
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentControllerApi
     */
    public async getAgents1(orgMrn: string, page?: number, size?: number, sort?: Array<string>, options?: AxiosRequestConfig) : Promise<AxiosResponse<PageAgent>> {
        return AgentControllerApiFp(this.configuration).getAgents1(orgMrn, page, size, sort, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing agent
     * @param {Agent} body 
     * @param {string} orgMrn 
     * @param {number} agentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentControllerApi
     */
    public async updateAgent(body: Agent, orgMrn: string, agentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Agent>> {
        return AgentControllerApiFp(this.configuration).updateAgent(body, orgMrn, agentId, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing agent
     * @param {Agent} body 
     * @param {string} orgMrn 
     * @param {number} agentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AgentControllerApi
     */
    public async updateAgent1(body: Agent, orgMrn: string, agentId: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Agent>> {
        return AgentControllerApiFp(this.configuration).updateAgent1(body, orgMrn, agentId, options).then((request) => request(this.axios, this.basePath));
    }
}
