/* tslint:disable */
/* eslint-disable */
/**
 * Maritime Connectivity Platform Identity Registry API
 * The MCP Identity Registry API can be used for managing entities in the Maritime Connectivity Platform.<br>Two versions of the API are available - one that requires authentication using OpenID Connect and one that requires authentication using a X.509 client certificate.<br>The OpenAPI descriptions for the two versions are available <a href=\"https://api.aivn.kr/v3/api-docs/mcp-idreg-oidc\">here</a> and <a href=\"https://api-x509.aivn.kr/v3/api-docs/mcp-idreg-x509\">here</a>.
 *
 * OpenAPI spec version: 1.2.1
 * Contact: info@maritimeconnectivity.net
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { VesselMrnVesselImageBody } from '../models';
import { VesselMrnVesselImageBody1 } from '../models';
import { VesselMrnVesselImageBody2 } from '../models';
import { VesselMrnVesselImageBody3 } from '../models';
/**
 * VesselImageControllerApi - axios parameter creator
 * @export
 */
export const VesselImageControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new vessel image using POST
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {VesselMrnVesselImageBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVesselImagePost: async (orgMrn: string, vesselMrn: string, body?: VesselMrnVesselImageBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling createVesselImagePost.');
            }
            // verify required parameter 'vesselMrn' is not null or undefined
            if (vesselMrn === null || vesselMrn === undefined) {
                throw new RequiredError('vesselMrn','Required parameter vesselMrn was null or undefined when calling createVesselImagePost.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/vessel/{vesselMrn}/vesselImage`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"vesselMrn"}}`, encodeURIComponent(String(vesselMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'image/png';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new vessel image using POST
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {VesselMrnVesselImageBody2} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createVesselImagePost1: async (orgMrn: string, vesselMrn: string, body?: VesselMrnVesselImageBody2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling createVesselImagePost1.');
            }
            // verify required parameter 'vesselMrn' is not null or undefined
            if (vesselMrn === null || vesselMrn === undefined) {
                throw new RequiredError('vesselMrn','Required parameter vesselMrn was null or undefined when calling createVesselImagePost1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/vessel/{vesselMrn}/vesselImage`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"vesselMrn"}}`, encodeURIComponent(String(vesselMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'image/png';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the image of a specified vessel
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVesselImage: async (orgMrn: string, vesselMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling deleteVesselImage.');
            }
            // verify required parameter 'vesselMrn' is not null or undefined
            if (vesselMrn === null || vesselMrn === undefined) {
                throw new RequiredError('vesselMrn','Required parameter vesselMrn was null or undefined when calling deleteVesselImage.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/vessel/{vesselMrn}/vesselImage`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"vesselMrn"}}`, encodeURIComponent(String(vesselMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the image of a specified vessel
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVesselImage1: async (orgMrn: string, vesselMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling deleteVesselImage1.');
            }
            // verify required parameter 'vesselMrn' is not null or undefined
            if (vesselMrn === null || vesselMrn === undefined) {
                throw new RequiredError('vesselMrn','Required parameter vesselMrn was null or undefined when calling deleteVesselImage1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/vessel/{vesselMrn}/vesselImage`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"vesselMrn"}}`, encodeURIComponent(String(vesselMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the image of a specified vessel
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVesselImage: async (orgMrn: string, vesselMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getVesselImage.');
            }
            // verify required parameter 'vesselMrn' is not null or undefined
            if (vesselMrn === null || vesselMrn === undefined) {
                throw new RequiredError('vesselMrn','Required parameter vesselMrn was null or undefined when calling getVesselImage.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/vessel/{vesselMrn}/vesselImage`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"vesselMrn"}}`, encodeURIComponent(String(vesselMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the image of a specified vessel
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVesselImage1: async (orgMrn: string, vesselMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling getVesselImage1.');
            }
            // verify required parameter 'vesselMrn' is not null or undefined
            if (vesselMrn === null || vesselMrn === undefined) {
                throw new RequiredError('vesselMrn','Required parameter vesselMrn was null or undefined when calling getVesselImage1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/vessel/{vesselMrn}/vesselImage`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"vesselMrn"}}`, encodeURIComponent(String(vesselMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create or update a vessel image using PUT
         * @param {Array<string>} body 
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVesselImagePut: async (body: Array<string>, orgMrn: string, vesselMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateVesselImagePut.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling updateVesselImagePut.');
            }
            // verify required parameter 'vesselMrn' is not null or undefined
            if (vesselMrn === null || vesselMrn === undefined) {
                throw new RequiredError('vesselMrn','Required parameter vesselMrn was null or undefined when calling updateVesselImagePut.');
            }
            const localVarPath = `/oidc/api/org/{orgMrn}/vessel/{vesselMrn}/vesselImage`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"vesselMrn"}}`, encodeURIComponent(String(vesselMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'image/png';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Create or update a vessel image using PUT
         * @param {Array<string>} body 
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVesselImagePut1: async (body: Array<string>, orgMrn: string, vesselMrn: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling updateVesselImagePut1.');
            }
            // verify required parameter 'orgMrn' is not null or undefined
            if (orgMrn === null || orgMrn === undefined) {
                throw new RequiredError('orgMrn','Required parameter orgMrn was null or undefined when calling updateVesselImagePut1.');
            }
            // verify required parameter 'vesselMrn' is not null or undefined
            if (vesselMrn === null || vesselMrn === undefined) {
                throw new RequiredError('vesselMrn','Required parameter vesselMrn was null or undefined when calling updateVesselImagePut1.');
            }
            const localVarPath = `/x509/api/org/{orgMrn}/vessel/{vesselMrn}/vesselImage`
                .replace(`{${"orgMrn"}}`, encodeURIComponent(String(orgMrn)))
                .replace(`{${"vesselMrn"}}`, encodeURIComponent(String(vesselMrn)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'image/png';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers! = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers!['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VesselImageControllerApi - functional programming interface
 * @export
 */
export const VesselImageControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new vessel image using POST
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {VesselMrnVesselImageBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVesselImagePost(orgMrn: string, vesselMrn: string, body?: VesselMrnVesselImageBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await VesselImageControllerApiAxiosParamCreator(configuration).createVesselImagePost(orgMrn, vesselMrn, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new vessel image using POST
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {VesselMrnVesselImageBody2} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVesselImagePost1(orgMrn: string, vesselMrn: string, body?: VesselMrnVesselImageBody2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await VesselImageControllerApiAxiosParamCreator(configuration).createVesselImagePost1(orgMrn, vesselMrn, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete the image of a specified vessel
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVesselImage(orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await VesselImageControllerApiAxiosParamCreator(configuration).deleteVesselImage(orgMrn, vesselMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete the image of a specified vessel
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVesselImage1(orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await VesselImageControllerApiAxiosParamCreator(configuration).deleteVesselImage1(orgMrn, vesselMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the image of a specified vessel
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVesselImage(orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await VesselImageControllerApiAxiosParamCreator(configuration).getVesselImage(orgMrn, vesselMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the image of a specified vessel
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVesselImage1(orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await VesselImageControllerApiAxiosParamCreator(configuration).getVesselImage1(orgMrn, vesselMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create or update a vessel image using PUT
         * @param {Array<string>} body 
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVesselImagePut(body: Array<string>, orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await VesselImageControllerApiAxiosParamCreator(configuration).updateVesselImagePut(body, orgMrn, vesselMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create or update a vessel image using PUT
         * @param {Array<string>} body 
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVesselImagePut1(body: Array<string>, orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<any>>> {
            const localVarAxiosArgs = await VesselImageControllerApiAxiosParamCreator(configuration).updateVesselImagePut1(body, orgMrn, vesselMrn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VesselImageControllerApi - factory interface
 * @export
 */
export const VesselImageControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new vessel image using POST
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {VesselMrnVesselImageBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVesselImagePost(orgMrn: string, vesselMrn: string, body?: VesselMrnVesselImageBody, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return VesselImageControllerApiFp(configuration).createVesselImagePost(orgMrn, vesselMrn, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new vessel image using POST
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {VesselMrnVesselImageBody2} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createVesselImagePost1(orgMrn: string, vesselMrn: string, body?: VesselMrnVesselImageBody2, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return VesselImageControllerApiFp(configuration).createVesselImagePost1(orgMrn, vesselMrn, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the image of a specified vessel
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVesselImage(orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return VesselImageControllerApiFp(configuration).deleteVesselImage(orgMrn, vesselMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the image of a specified vessel
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVesselImage1(orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return VesselImageControllerApiFp(configuration).deleteVesselImage1(orgMrn, vesselMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the image of a specified vessel
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVesselImage(orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return VesselImageControllerApiFp(configuration).getVesselImage(orgMrn, vesselMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the image of a specified vessel
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVesselImage1(orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return VesselImageControllerApiFp(configuration).getVesselImage1(orgMrn, vesselMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create or update a vessel image using PUT
         * @param {Array<string>} body 
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVesselImagePut(body: Array<string>, orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return VesselImageControllerApiFp(configuration).updateVesselImagePut(body, orgMrn, vesselMrn, options).then((request) => request(axios, basePath));
        },
        /**
         * Create or update a vessel image using PUT
         * @param {Array<string>} body 
         * @param {string} orgMrn 
         * @param {string} vesselMrn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVesselImagePut1(body: Array<string>, orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig): Promise<AxiosResponse<any>> {
            return VesselImageControllerApiFp(configuration).updateVesselImagePut1(body, orgMrn, vesselMrn, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VesselImageControllerApi - object-oriented interface
 * @export
 * @class VesselImageControllerApi
 * @extends {BaseAPI}
 */
export class VesselImageControllerApi extends BaseAPI {
    /**
     * Create a new vessel image using POST
     * @param {string} orgMrn 
     * @param {string} vesselMrn 
     * @param {VesselMrnVesselImageBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VesselImageControllerApi
     */
    public async createVesselImagePost(orgMrn: string, vesselMrn: string, body?: VesselMrnVesselImageBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return VesselImageControllerApiFp(this.configuration).createVesselImagePost(orgMrn, vesselMrn, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new vessel image using POST
     * @param {string} orgMrn 
     * @param {string} vesselMrn 
     * @param {VesselMrnVesselImageBody2} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VesselImageControllerApi
     */
    public async createVesselImagePost1(orgMrn: string, vesselMrn: string, body?: VesselMrnVesselImageBody2, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return VesselImageControllerApiFp(this.configuration).createVesselImagePost1(orgMrn, vesselMrn, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete the image of a specified vessel
     * @param {string} orgMrn 
     * @param {string} vesselMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VesselImageControllerApi
     */
    public async deleteVesselImage(orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return VesselImageControllerApiFp(this.configuration).deleteVesselImage(orgMrn, vesselMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete the image of a specified vessel
     * @param {string} orgMrn 
     * @param {string} vesselMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VesselImageControllerApi
     */
    public async deleteVesselImage1(orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return VesselImageControllerApiFp(this.configuration).deleteVesselImage1(orgMrn, vesselMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the image of a specified vessel
     * @param {string} orgMrn 
     * @param {string} vesselMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VesselImageControllerApi
     */
    public async getVesselImage(orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return VesselImageControllerApiFp(this.configuration).getVesselImage(orgMrn, vesselMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the image of a specified vessel
     * @param {string} orgMrn 
     * @param {string} vesselMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VesselImageControllerApi
     */
    public async getVesselImage1(orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return VesselImageControllerApiFp(this.configuration).getVesselImage1(orgMrn, vesselMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create or update a vessel image using PUT
     * @param {Array<string>} body 
     * @param {string} orgMrn 
     * @param {string} vesselMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VesselImageControllerApi
     */
    public async updateVesselImagePut(body: Array<string>, orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return VesselImageControllerApiFp(this.configuration).updateVesselImagePut(body, orgMrn, vesselMrn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create or update a vessel image using PUT
     * @param {Array<string>} body 
     * @param {string} orgMrn 
     * @param {string} vesselMrn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VesselImageControllerApi
     */
    public async updateVesselImagePut1(body: Array<string>, orgMrn: string, vesselMrn: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<any>> {
        return VesselImageControllerApiFp(this.configuration).updateVesselImagePut1(body, orgMrn, vesselMrn, options).then((request) => request(this.axios, this.basePath));
    }
}
